<apex:component Controller="ApplicationController" allowDML="true">
    <apex:attribute name="applicationSelected" type="Application__c" description="Application"/>
    <apex:attribute name="schoolId" type="String" description="school Id"/>
    <apex:attribute name="att_src" type="String" description="lead source code" assignTo="{!SRC}"/>
    <apex:attribute name="att_lid" type="String" description="lead id" assignTo="{!LID}"/>
    <apex:attribute name="goToSection" type="String" description="goToSection" assignTo="{!pageSection}"/>
    <script>
    
        ko.validation.init({
            registerExtenders: true,
            messagesOnModified: true,
            insertMessages: false,
            decorateInputElement:true,
            parseInputAttributes: true,
            messageTemplate: null
        },true);
        
        ko.bindingHandlers.fadeVisible = {
            init: function(element, valueAccessor) {
                // Initially set the element to be instantly visible/hidden depending on the value
                var value = valueAccessor();
                j$(element).toggle(ko.unwrap(value)); // Use "unwrapObservable" so we can handle values that may or may not be observable
            },
            update: function(element, valueAccessor) {
                // Whenever the value subsequently changes, slowly fade the element in or out
                var value = valueAccessor();
                ko.unwrap(value) ? j$(element).fadeIn() : j$(element).fadeOut();
            }
        };
        
        ko.observable.fn.toString = function() {
            return ko.toJSON(this(), null, 2);
        };
        
        var dateValidator = function (val) {
            if (!val)
                return false;
            if (ko.validation.utils.isEmptyVal(val) || moment(val, 'MM-DD-YYYY',true).isValid()) {
                var thisYear=moment(val,"MM-DD-YYYY").year();
                var currentY=new Date().getFullYear();                
                if(thisYear < currentY){
                    return true;
                }else{
                    return false;
                }
            }
            else
            {
                return false;
            }
        };
        
        var dateValidator2 = function (val) {
            if (!val)
                return false;
            if (ko.validation.utils.isEmptyVal(val) || moment(val, 'MM-DD-YYYY',true).isValid()) 
                return true;
            else
                return false;
        };

        
        // KnockoutJS viewmodel starts here
        var ApplicationVM = function()
        {
            var self=this;
            
            //global variables      
            self.totalApplications = ko.observable(); 
            self.applicationId = ko.observable();
            self.applicationId.subscribe(function(newValue){
                console.log('Application Id :: ',newValue);
            });
            self.ApplicationNumber = ko.observable();
            self.isReadOnly = ko.observable(false);
            self.performValidation = ko.observable(true);
            self.householdId = ko.observable();  
            self.studentId = ko.observable();
            
            self.emContId = ko.observable();
            self.leadSource = ko.observable();
            self.makeApplicationReadOnly = ko.observable();
            self.applicationStatus = ko.observable();
            
            self.sameParent = ko.observable(false);
            
            self.isPaid = ko.observable(false);
            self.confirmationNumber = ko.observable();
            self.paymentMessage = ko.observable();
            self.isPaid.subscribe(function(newValue){
                var message;
                
                if(newValue && !self.confirmationNumber()){
                    message='<div style="color:green; clear:both">Payment was successful.</div>';
                }
                else if(newValue && self.confirmationNumber()){
                    message='<div style="color:green; clear:both">Payment was successful. Confirmation #:'+self.confirmationNumber()+'</div>';
                }
                self.paymentMessage(message);
            });
            self.confirmationNumber.subscribe(function(newValue){
                console.log(self.isPaid());
                
                var errors=['ERROR', 'DECLINED', 'REFERRAL', 'HOLD', 'OTHER'];
                var message;
                if(!self.isPaid() && errors.indexOf(newValue.toUpperCase())){
                    message='<div style="color:red; clear:both">Payment was unsuccessful. Please try again.</div>';
                    
                }
                else if(self.isPaid() && !newValue){
                    message='<div style="color:green; clear:both">Payment was successful.</div>';
                }
                else if(self.isPaid() && newValue){
                    message='<div style="color:green; clear:both">Payment was successful. Confirmation #:'+newValue+'</div>';
                }
                
                self.paymentMessage(message);
            });
            
            self.applicationFound = ko.observable();
            self.checked = ko.observable('<span class="glyphicon glyphicon-ok" aria-hidden="true" ></span>');
            self.pageName=ko.observable();
            self.notApp=ko.observable(true);
            
            self.pageName.subscribe(function(newValue){
                if(newValue == 'application'){
                    self.notApp(false);
                }
                else{
                    self.notApp(true);
                }
            });
            //reused select lists           
            self.countryOptions = ko.observableArray(["United States","Afghanistan","Åland Islands","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua and Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia, Plurinational State of","Bonaire, Sint Eustatius nd Saba","Bosnia and Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory","Brunei Darussalam","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central African Republic","Chad","Chile","China","Christmas Island","Cocos (Keeling) Islands","Colombia","Comoros","Congo","Congo, the Democratic Republic of the","Cook Islands","Costa Rica","Côte d'Ivoire","Croatia","Cuba","Curaçao","Cyprus","Czech Republic","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Ethiopia","Falkland Islands (Malvinas)","Faroe Islands","Fiji","Finland","France","French Guiana","French Polynesia","French Southern Territories","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guernsey","Guinea","Guinea-Bissau","Guyana","Haiti","Heard Island and McDonald Islands","Holy See (atican City State)","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran, Islamic Republic of","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Korea, Democratic People's Republic of","Korea, Republic of","Kuwait","Kyrgyzstan","Lao People's Democratic Republic","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macao","Macedonia, the former ugoslav Republic of","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia, Federated States of","Moldova, Republic of","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","Niue","Norfolk Island","Northern Mariana Islands","Norway","Oman","Pakistan","Palau","Palestinian Territory, Occupied","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Pitcairn","Poland","Portugal","Puerto Rico","Qatar","Réunion","Romania","Russian Federation","Rwanda","Saint Barthélemy","Saint Helena, Ascension and Tristan da Cunha","Saint Kitts and Nevis","Saint Lucia","Saint Martin (French part)","Saint Pierre and Miquelon","Saint Vincent and the Grenadines","Samoa","San arino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Sint Maarten (Dutch part)","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Georgia and the South Sandwich slands","South Sudan","Spain","Sri Lanka","Sudan","Suriname","Svalbard and Jan Mayen","Swaziland","Sweden","Switzerland","Syrian Arab Republic","Taiwan, Province of China","Tajikistan","Tanzania, United Republic of","Thailand","Timor-este","Togo","Tokelau","Tonga","Trinidad and Tobago","Tunisia","Turkey","Turkmenistan","Turks and Caicos Islands","Tuvalu","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States Minor Outlying Islands","Uruguay","Uzbekistan","Vanuatu","Venezuela, Bolivarian Republic of","Viet Nam","Virgin Islands, British","Virgin Islands, U.S.","Wallis and Futuna","Western Sahara","Yemen","Zambia","Zimbabwe"]);
            self.citizenShipCountryOptions=[];
            
            self.extractNumbers = function(number){
                var rtn;
                
                if(number){
                    rtn=number.toString().replace(/[^0-9]/g, '');
                }
                return rtn
            }
            self.intlNumber = function(number){
                var newNumber=self.extractNumbers(number);
                
                if(newNumber && newNumber.length==10){
                    newNumber='+1'+newNumber;
                }
                else if(newNumber){
                    newNumber='+'+newNumber;
                }
                return newNumber;
            }
            
            for(var i=1; i<self.countryOptions().length; i++){
                self.citizenShipCountryOptions.push(self.countryOptions()[i]);
            }
            self.countryOptionsInternational = ko.observableArray(self.citizenShipCountryOptions);
            
            self.yesOrNoOptions = ko.observableArray(["Yes", "No"]);
            //self.stateOptions = ko.observableArray(["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming","Washington DC","Other"]);
            self.stateOptions = ko.observableArray([{value:'AL',text:'Alabama'},
                                                    {value:'AK',text:'Alaska'},
                                                    {value:'AS',text:'American Samoa'},
                                                    {value:'AZ',text:'Arizona'},
                                                    {value:'AR',text:'Arkansas'},
                                                    {value:'CA',text:'California'},
                                                    {value:'CO',text:'Colorado'},
                                                    {value:'CT',text:'Connecticut'},
                                                    {value:'DE',text:'Delaware'},
                                                    {value:'FL',text:'Florida'},
                                                    {value:'GA',text:'Georgia'},
                                                    {value:'GU',text:'Guam'},
                                                    {value:'HI',text:'Hawaii'},
                                                    {value:'ID',text:'Idaho'},
                                                    {value:'IL',text:'Illinois'},
                                                    {value:'IN',text:'Indiana'},
                                                    {value:'IA',text:'Iowa'},
                                                    {value:'KS',text:'Kansas'},
                                                    {value:'KY',text:'Kentucky'},
                                                    {value:'LA',text:'Louisiana'},
                                                    {value:'ME',text:'Maine'},
                                                    {value:'MH',text:'Marshall Islands'},
                                                    {value:'MD',text:'Maryland'},
                                                    {value:'MA',text:'Massachusetts'},
                                                    {value:'MI',text:'Michigan'},
                                                    {value:'FM',text:'Micronesia'},
                                                    {value:'MN',text:'Minnesota'},
                                                    {value:'MS',text:'Mississippi'},
                                                    {value:'MO',text:'Missouri'},
                                                    {value:'MT',text:'Montana'},
                                                    {value:'NE',text:'Nebraska'},
                                                    {value:'NV',text:'Nevada'},
                                                    {value:'NH',text:'New Hampshire'},
                                                    {value:'NJ',text:'New Jersey'},
                                                    {value:'NM',text:'New Mexico'},
                                                    {value:'NY',text:'New York'},
                                                    {value:'NC',text:'North Carolina'},
                                                    {value:'ND',text:'North Dakota'},
                                                    {value:'MP',text:'Northern Marianas'},
                                                    {value:'OH',text:'Ohio'},
                                                    {value:'OK',text:'Oklahoma'},
                                                    {value:'OR',text:'Oregon'},
                                                    {value:'PW',text:'Palau'},
                                                    {value:'PA',text:'Pennsylvania'},
                                                    {value:'PR',text:'Puerto Rico'},
                                                    {value:'RI',text:'Rhode Island'},
                                                    {value:'SC',text:'South Carolina'},
                                                    {value:'SD',text:'South Dakota'},
                                                    {value:'TN',text:'Tennessee'},
                                                    {value:'TX',text:'Texas'},
                                                    {value:'UT',text:'Utah'},
                                                    {value:'VT',text:'Vermont'},
                                                    {value:'VI',text:'Virgin Islands'},
                                                    {value:'VA',text:'Virginia'},
                                                    {value:'WA',text:'Washington'},
                                                    {value:'DC',text:'Washington DC'},
                                                    {value:'WV',text:'West Virginia'},
                                                    {value:'WI',text:'Wisconsin'},
                                                    {value:'WY',text:'Wyoming'}]);
            //button visibles
            self.studentInfoIsEdit = ko.observable();
            self.parentInfoIsEdit = ko.observable();
            self.emerContInfoIsEdit = ko.observable();
            self.programInfoIsEdit = ko.observable();
            self.educationInfoIsEdit = ko.observable();
            self.collegeInfoIsEdit = ko.observable();
            self.citizenInfoIsEdit = ko.observable();
            self.veteranInfoIsEdit = ko.observable();
            self.essayInfoIsEdit = ko.observable();
            self.previousHistoryIsEdit = ko.observable();
            self.previousHistoryIsEdit2 = ko.observable();
            self.statisticInfoIsEdit = ko.observable();
            self.disabilityInfoIsEdit = ko.observable();
            self.referAFriendInfoIsEdit = ko.observable();
            self.acceptanceInfoIsEdit = ko.observable(); 
            self.isGuestUser = ko.observable(true); 
            self.doneSettingPassword = ko.observable(false);              

            //sections
            self.studentDetails = ko.observable();
            self.studentDetails.subscribe(function(newValue){
                console.log('QQQQQQQQQQQQQQQ ==== >>> ',newValue);
            });
            self.studentDetailsComplete = ko.observable();
            self.parentDetails = ko.observable();
            self.under24Section = ko.observable();
            self.emerContDetails = ko.observable();
            self.programInfoDetails = ko.observable();
            self.educationDetails = ko.observable();
            self.collegeDetails = ko.observable();
            self.citizenDetails = ko.observable();
            self.veteranDetails = ko.observable();
            self.essayDetails = ko.observable();
            self.previousHistoryDetails = ko.observable();
            self.previousHistoryDetails2 = ko.observable();
            self.disabilitiesDetails = ko.observable();
            self.statisticalDetails = ko.observable();
            self.referAFriendDetails = ko.observable();
            self.uploadDetails = ko.observable();
            self.acceptanceDetails = ko.observable();
            self.submissionDetails = ko.observable();
            self.bringBackToSubmission = ko.observable(false);
            self.setPassword = ko.observable(false);
            self.applicantPassword = ko.observable();
            self.applicationSubmitted = ko.observable().extend({
                required: true, 
                validation:{
                    validator:function(newValue)
                    { 
                        if(newValue){
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
               }
            });
            self.applicationSubmitted.subscribe(function(newValue){
                if(newValue){
                    var fullname = self.studentFirstName() + ' ' + self.studentLastName();
                    j$('#ApplicantSignature').val(fullname);
                    if(self.applicationSubmitted.isValid()){
                        j$('#ApplicationFinalSubmit').removeClass('validationElement');
                    }
                }
                else{
                    j$('#ApplicantSignature').val('');
                }
            });
            self.payLink = ko.observable();
            self.payLater = ko.observable();
            self.payLater.subscribe(function(check){
                if(check){
                    j$('#paybtn').addClass('btn disabled')
                }
                else{
                    j$('#paybtn').removeClass('btn disabled')
                }
            });
            
            self.payLinkClick = function(){
                console.log(self.applicationId());
                window.location.href = self.payLink();
            }
            self.changePayOption = function()
            {
            
                var payVal = self.payLater();
                
                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ApplicationController.savePayLater}', self.applicationId(), payVal , 
                                    function(result){  
                                            console.log('called save pay later');
                                        }
                    );
                return true;
            }
            
            self.contactInfoComplete = function(){

              return self.studentDetailsComplete() && (self.parentInfoComplete() || !self.under24()) && (self.veteranInfoComplete() || self.international()) && self.citizenInfoComplete() && self.programInfoComplete() && self.emContInfoComplete();  
            }

            self.educationAndBackgroundInfoComplete = function(){
                return self.highSchoolInfoComplete()  && self.disabilityInfoComplete() && self.criminalInfoComplete() && self.disciplineInfoComplete();
            }

            self.supplimentalInformationComplete = function(){
                return self.shortEssayComplete() && self.statisticalInfoComplete() && self.referralInfoComplete() && self.acceptanceInfoComplete(); ;
            }



            var userType = "{!IF(NOT(ISPICKVAL($User.UserType,'Guest')),'loggedInApplicant','guest')}";    /////            
            if(userType === 'guest'){
                self.isGuestUser(true);                                
            }else{
                self.isGuestUser(false);
                j$('#secondPageSaveAndExitButton').removeClass('disabled');
                j$('#secondPageSaveAndExitButton').text('Save and Finish Later');
                j$('#secondPageNextButton').removeClass('disabled');                
                j$('#secondPageNextButton').text('Next');
            }
            
            self.moveToSection=function(section,event)
            {   
                var ctrl=false;
                
                //on Windows Ctrl + Shift + Click, On Mac Command + Shift + Click
                //Click with these keys will move pages bypassing validation
                //in this method it does not update Salesforce but move pages
                if(event && (event.ctrlKey || event.metaKey) && event.shiftKey) {
                    ctrl=true;
                }
                
                var steps=[];
                steps.push('studentDetailSection');                    
                steps.push('educationDetailSection');                    
                steps.push('essayDetailSection');
                steps.push('uploadDetailsSection');                                     
                
                var current='';
                var sourceStepIndex  = 0;
                var destStepIndex = 0;

                //var url=window.location.href;
                //var urlR=url.split('#');
                //var myParam = location.search.split('=')[1]
                                       
                current=j$(".vwspc-section:visible").attr('id');
                
                var position=0;
                
                if(section=='first' || section=='null' || !section)
                {
                    console.log('section is ',section);
                    section=steps[0];
                }
                else if(section=='back')
                {
                    var positionTemp = 0;
                    for(var i=0; i<steps.length; i++){
                        if(current==steps[i]){
                            positionTemp=i;
                            break;
                        }
                    }                           
                    position = positionTemp;
                    position=position-1; 

                    if(position < 0){
                        section = current;
                    }else{
                        section=steps[position];                               
                    }
                }
                else if(section=='next' )
                {
                    var positionTemp = 0;
                    for(var i=0; i<steps.length; i++){                                
                        if(current==steps[i]){
                            positionTemp=i;
                            break;
                        }
                    }                            
                    positionTemp=positionTemp+1;                            
                    position = positionTemp;   
                    section=steps[position];     
                }
                
                for(var i=0; i<steps.length; i++){
                    if(section==steps[i]){
                        position=i;
                        destStepIndex = position;
                        break;
                    }
                }

                for(var i=0; i<steps.length; i++){
                    if(current==steps[i]){
                        sourceStepIndex = i;
                        break;
                    }
                } 
                
                history.pushState("",section, location.pathname+'?goToSection='+section);

                // allowing go back
                if((sourceStepIndex < destStepIndex) || ctrl)
                {
                    if(self.isReadOnly() || ctrl){
                        self.changeSections(section);
                    }
                    else if(current && (destStepIndex-sourceStepIndex)==1)
                    {
                        if(current == 'studentDetailSection')
                        { 
                            self.saveFirstPage();                                          
                        }
                        else if(current == 'educationDetailSection')
                        {                        
                            self.saveSecondPage();
                            
                        }
                        else if(current == 'essayDetailSection')
                        {
                            self.saveThirdPage();
                        }
                   }
                   else
                   { 
                       var val1=self.firstPageValidation.isValid();
                       var val2=self.secondPageValidation.isValid();
                       var val3=self.thirdPageValidation.isValid();
                       
                        
                        
                       if((destStepIndex==1 && val1==true) || (destStepIndex==2 && val1==true && val2==false))
                       {
                           // go to 2nd page
                           self.changeSections('educationDetailSection');
                       }
                       else if(destStepIndex==2 && val1==true && val2==true && val3==false)
                       {
                           // go to 3rd page
                           self.changeSections('essayDetailSection');
                       }
                       else
                       {
                           // go to 1st page
                           self.changeSections('studentDetailSection');
                       }
                   }
                }
                else
                {    
                    if(section=='uploadDetailsSection'){
                        j$('#sectionListPanel').hide();
                    }
                    else{
                        j$('#sectionListPanel').show();
                    }
                    self.changeSections(section);
                }
                                                        
            } // moveToSection ends

            self.changeSections = function(section)
            {
                j$('#sectionListPanel').find('li').each(function(){
                    j$(this).removeClass('active');
                    j$(this).removeClass('ui-state-selected');
                    j$(this).addClass('ui-state');
                });

                j$('#'+section+'Pill').addClass('active');
                j$('#'+section+'Pill').addClass('ui-state-selected');
                j$('#'+section+'Pill').removeClass('ui-state-disabled');
                j$('.vwspc-section').not("#" + section).hide("slide", { direction: "up" }, 100);
                j$("#" + section).fadeIn(100);
                j$(".intl:visible").each(function()
                {
                    if(typeof j$(this).intlTelInput("getNumber")=='object')
                    {
                        j$(this).intlTelInput({initialCountry: "auto",
                           geoIpLookup: function(callback) {
                              $.get("https://ipinfo.io", function() {}, "jsonp").always(function(resp) {
                                var countryCode = (resp && resp.country) ? resp.country : "";
                                callback(countryCode);
                              });
                            },
                            utilsScript: "{!URLFOR($Resource.IntlTelFomat, 'js/utils.js')}"});
                    }
                    
                    if(typeof j$(this).intlTelInput("getSelectedCountryData").iso2=='undefined')
                    {
                        j$(this).intlTelInput("setCountry", "us");
                    }
                });
                document.body.scrollTop = 0; // For Chrome, Safari and Opera 
                document.documentElement.scrollTop = 0; // For IE and Firefox
                
                j$.each(j$(".vwspc-section"),function(){
                    var thisId=j$(this).attr('id');
                    
                    if(thisId==section){
                        j$('#'+thisId).show();
                    }
                    else{
                        j$('#'+thisId).hide();
                    }
                });
                
                j$('#loadingModal').modal('hide');            
            }
                    
            self.showProgress=function(position,sections){
                var elem = j$(".progress"); 
                j$(elem).css('background-color','#cccccc');
                var bar=j$(".bar");
                var width = 1;
                var begin=(position==1)?1:Math.ceil(((position-1)/sections)*100);
                var end=Math.ceil((position/sections)*100);
                var id = setInterval(frame, 1);
                function frame() {
                    if (width >= end) {
                        clearInterval(id);
                    } else {
                        width++; 
                        $(bar).css('width',width+'%');
                    }
                    $(bar).html(width+'%');
                }
            }
            self.goToThisSection = function(sectionToOpen){
                self.bringBackToSubmission(true);              
                if(sectionToOpen == 'studentDetailSection'){
                    self.studentInfoIsEdit(true);
                }
                else if(sectionToOpen == 'parentDetailSection'){
                    self.parentInfoIsEdit(true);
                }
                else if(sectionToOpen == 'emerContSection'){
                    self.emerContInfoIsEdit(true);
                }
                else if(sectionToOpen == 'programInfoSection'){
                    self.programInfoIsEdit(true);
                }
                else if(sectionToOpen == 'educationDetailSection'){
                    self.educationInfoIsEdit(true);
                }
                else if(sectionToOpen == 'collegeDetailSection'){
                    self.collegeInfoIsEdit(true);
                }
                else if(sectionToOpen == 'citizenDetailSection'){
                    self.citizenInfoIsEdit(true);
                }
                else if(sectionToOpen == 'veteranDetailSection'){
                    self.veteranInfoIsEdit(true);
                }
                else if(sectionToOpen == 'essayDetailSection'){
                    self.essayInfoIsEdit(true);
                }
                else if(sectionToOpen == 'previousHistoryDetailSection'){
                    self.previousHistoryIsEdit(true);
                }
                else if(sectionToOpen == 'previousHistoryDetailSection2'){
                    self.previousHistoryIsEdit2(true);
                }
                else if(sectionToOpen == 'statisticalDetailSection'){
                    self.statisticInfoIsEdit(true);
                }
                else if(sectionToOpen == 'disabilitiesDetailSection'){
                    self.disabilityInfoIsEdit(true);
                }
                else if(sectionToOpen == 'referAFriendSection'){
                    self.referAFriendInfoIsEdit(true);
                }       
                else if(sectionToOpen == 'acceptanceSection'){
                    self.acceptanceInfoIsEdit(true);
                }
                self.moveToSection(sectionToOpen);
                        
            }  
                                 
            //student information 
            self.addmissionsRep = ko.observable(true);
            //self.representativeId = ko.observable();
            self.representative = ko.observable();
            self.repName = ko.observable("Admissions:");
            self.repPhone = ko.observable(" 877-952-3456 | LOCAL: 323-860-0789");
            self.repEmail = ko.observable("info@lafilm.edu");
            self.studentFirstName = ko.observable().extend({ required: true });
            self.studentFullName = ko.observable();
            self.studentLastName = ko.observable().extend({ required: true });
            self.studentPhone = ko.observable().extend({
                required:true,
                validation:{
                    validator: function(){
                        return j$('#txt_phone_number').intlTelInput("isValidNumber");
                    }
                }
            });
            
            self.studentAltPhone = ko.observable().extend({
                required:false,
                validation:{
                    validator: function(){
                        return (j$('#txt_alt_phone_number').intlTelInput("isValidNumber") || j$('#txt_alt_phone_number').intlTelInput("getNumber")=='');
                    }
                }
            });
                                   
            self.studentEmail = ko.observable().extend({
                required: {
                    params: true, message: 'Enter  Email Address' 
                } 
            }).extend({
                    pattern: {
                        params : /\S+@\S+\.\S+/,
                        message : 'Enter Valid Email Address'
                    }
            });  
            self.goBackSetPasswordModal = function(){
                j$('#setPasswordModal').modal('hide');
                j$('#loadingModal').modal('hide');
                self.setPassword(false);                           
            }                                 
            self.studentDOB = ko.observable().extend({ validation: { validator: dateValidator, message: 'Date is not in the correct format.' } });
            self.studentDOB_Alt = ko.observable();
            self.under24 = ko.observable();
            self.studentUsStates = ko.observable(false);
            j$('#studentState').css('display','none !important');
            self.studentCountry = ko.observable().extend({ required: true });
            self.selectedUsState = ko.observable().extend({
                required:{
                    onlyIf: function(){
                        return self.studentCountry() == 'United States';
                    }
                }           
            });
            self.selectedUsState.subscribe(function(newValue){
                var disAllowStatus=['AR','DE','DC','MN','PR'];
                
                if(disAllowStatus.indexOf(newValue)>=0){
                    self.campusOptions(["On Campus"]);
                }
                else{
                    self.campusOptions(["On Campus","Online"]);
                }
            });
            
            self.studentProvince = ko.observable();
            self.selectedProvince = ko.observable().extend({
                required:{
                    onlyIf: function(){
                        return self.studentCountry() != 'United States';
                    }
                }           
            });
            self.studentState = ko.observable();
            
            self.studentCountry.subscribe(function(newValue){

                if(newValue == 'United States'){
                    self.studentUsStates(true);
                    self.studentProvince(false);
                    self.selectedProvince();
                    //self.studentState(self.selectedUsState());
                }
                else{                   
                    self.studentUsStates(false);
                    self.studentProvince(true);
                    self.selectedUsState();
                    //self.studentState(self.selectedProvince());
                }           
            });
            self.studentHomeAddress = ko.observable().extend({ required: true });
            self.studentFullAddress = ko.observable();
            self.studentCity = ko.observable().extend({ required: true });          
            self.studentZip = ko.observable().extend({ required: {onlyIf:function(){return ((self.studentCountry()=='United States' || !self.studentCountry())?true:false);}}});               
            //program info here because creating application record
            self.programCode = ko.observable();
            self.programInfoComplete = ko.observable();
            self.goBackToParentSection = function(){
            
                if(!self.under24()){
                    self.studentDetails(true);
                    j$('html,body').animate({scrollTop: j$(studentDetailSection).offset().top}, 1000);
                }
                else{
                    self.parentDetails(true);
                    j$('html,body').animate({scrollTop: j$(parentDetailSection).offset().top}, 1000);
                }
            }
            
            
            self.reApply = function(){
                console.log('self.applicationId------->>>>',self.applicationId());
                self.bringBackToSubmission = ko.observable();
                self.appFinalized = ko.observable(false);                               
                self.applicationId = ko.observable();
                self.studentInfoIsEdit = ko.observable(false); 
                self.shortEssayComplete = ko.observable(false);
                self.studentDetailsComplete = ko.observable(false);
                self.shortEssay = ko.observable(); 
                self.collegeInfoIsEdit = ko.observable(false);                             
                self.goToThisSection('studentDetailSection');
                
                console.log('self after------->>>>',self);
                
            }
            self.buttonTitle=function(value){              
                if(self.appFinalized()){
                    return 'SUBMITTED';
                }
                else if(value==true){
                    return 'EDIT';
                }
                else {
                    return 'PENDING';
                }                
            }
            
            self.onContinue = function(){
                var password = j$('#password').val();
                var passwordConfirm = j$('#passwordConfirm').val();
                var currentSection = j$(".vwspc-section:visible").attr('id');
                
                if(password !== passwordConfirm)
                {
                    j$('#setPasswordErrorMessage').hide();
                    j$('#passwordsDoNotMatch').show();
                }
                else
                {
                    if(currentSection=='essayDetailSection' && self.thirdPageValidation.isValid()){
                        currentSection='uploadDetailsSection';
                    }
                    
                    self.setApplicantPassword(password,currentSection);
                }
            }
            
            self.setApplicantPassword = function(password,section)
            {
                if(self.studentEmail().includes(password))
                {
                    j$('#setPasswordErrorMessage').show();
                }
                else
                {
                    j$('#setPasswordErrorMessage').hide();                
                    j$('#setPasswordModal').modal('hide');    
                    j$('#loadingIconText').show();                
                    j$('#loadingModal').modal('show');   
                                                     
                        
                    var studentDetails = {
                        'studentId' : self.studentId(),
                        'password' : password                                                                                                                            
                    }
                    
                        
                    if(studentDetails['studentId'] && studentDetails['password'])
                    {
                        self.applicantPassword(password);
                        
                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ApplicationController.setApplicantPassword}',studentDetails,
                            function(result)
                            {
                                 if(result['success'] === true)
                                 {
                                    if(section){
                                        self.loginToApplicationGoToSection(section);
                                    }
                                    else{                              
                                        self.loginToApplicationGoToSection('uploadDetailsSection');
                                    }
                                 }
                                 else
                                 {

                                    j$('#setPasswordErrorMessage').show();                
                                    j$('#setPasswordModal').modal('show');    
                                    j$('#loadingIconText').hide();                
                                    j$('#loadingModal').modal('hide'); 
                                    
                                    if(result && result['error'] === true){
                                        j$('#setPasswordErrorMessage').html(result['errorMessage']);
                                        j$('#passwordsDoNotMatch').hide();
                                    }
                                 }
                            },{escape : false});
                    }
                }
            } 

            self.showSetPasswordModal = function(){   
                if(j$(this).text().toLowerCase()=='please wait...'){
                    return;
                } 
                
                var currentSection = j$(".vwspc-section:visible").attr('id');
                
                if(currentSection === 'studentDetailSection')
                {
                    if(self.firstPageValidation.isValid()){
                        self.saveFirstPage(true);
                    }
                    else
                    {
                        self.validatePages(self.firstPageValidation()); 
                    }
                }
                else if(currentSection === 'educationDetailSection')
                {
                    if(self.secondPageValidation.isValid()){
                        self.saveSecondPage(true);
                    }
                    else{
                        j$('#loadingModal').modal('hide');
                        j$('#setPasswordModal').modal('show');
                    }
                }
                else if(currentSection === 'essayDetailSection')
                {
                    if(self.thirdPageValidation.isValid()){
                        self.saveThirdPage(true);
                    }
                    else{
                       j$('#loadingModal').modal('hide');
                       j$('#setPasswordModal').modal('show'); 
                    }
                }
                /*
                
                var currentSection = j$(".vwspc-section:visible").attr('id');
                var allRequiredInfoFilled = false;                
                var isCitizenInfoValid;
                var isProgramInfoValid;
                var crimianalHistory;
                var disabilityServices;            
                var academicMisconduct;
                var base30;
                if(currentSection === 'studentDetailSection'){
                    var isCitizenInfoValid = citizenshipValidator();
                    var isProgramInfoValid = programInfoValidator();
                    allRequiredInfoFilled = studentInfoValidation().length === 0 && isCitizenInfoValid == '' && isProgramInfoValid == '' && emContInfoValidation().length == 0 && programInfoValidation().length == 0; 
                }else if(currentSection === 'educationDetailSection'){
                    self.performValidation(false);
                    var crimianalHistory = criminalHistoryValidator();
                    var disabilityServices = disabilityServicesValidator();
                    var academicMisconduct = academicMisconductValidator();
                    allRequiredInfoFilled = educationDetailsValidation().length === 0 && crimianalHistory == '' && disabilityServices == '' && academicMisconduct == ''; 

                }else if(currentSection === 'essayDetailSection'){
                    self.performValidation(false);
                    var shortEssayContent = CKEDITOR.instances['shortEssay'].getData();                
                    self.shortEssay(shortEssayContent);                      
                    allRequiredInfoFilled = shortEssayValidation().length==0 ; //&& base30 != ''
                    //self.goToPreviousHistorySection();
                } 
                if(!self.performValidation() || allRequiredInfoFilled){                    
                    j$(isCitizenInfoValid).removeClass('validationElement');
                    j$(isProgramInfoValid).removeClass('validationElement');
                    j$(crimianalHistory).removeClass('validationElement');
                    j$(academicMisconduct).removeClass('validationElement');
                    j$(disabilityServices).removeClass('validationElement');
                    //j$(base30).removeClass('validationElement');   
                    j$('#countryCitizen').removeClass('validationElement');
                    j$('#ssn').removeClass('validationElement'); 
                    j$('#residentialStatusOptions').removeClass('validationElement'); 
                    j$('#programCode').removeClass('validationElement');
                    j$('#programVersion').removeClass('validationElement'); 
                    //j$('#criminalHistoryExplain').removeClass('validationElement');
                    j$('#criminalHistoryOptions').removeClass('validationElement');
                    j$('#disabilityServicesExplain').removeClass('validationElement');
                    j$('#disabilityServicesExplain').removeClass('validationElement');
                    j$('#educationDisciplineExplain').removeClass('validationElement');
                    j$('#educationDisiplineQuestion').removeClass('validationElement');
                    //self.highSchoolInfoComplete(true);  
                    self.setPassword(true);                                                                    
                    j$('#setPasswordModal').modal('show'); 
                }else{
                    if(currentSection === 'studentDetailSection'){
                        studentInfoValidation.showAllMessages();    
                        emContInfoValidation.showAllMessages();
                        programInfoValidation.showAllMessages();
                        j$(isCitizenInfoValid).addClass('validationElement');
                        j$(isProgramInfoValid).addClass('validationElement');                                        
                    }else if(currentSection === 'educationDetailSection'){
                        educationDetailsValidation.showAllMessages(); 
                        j$(crimianalHistory).addClass('validationElement');
                        j$(academicMisconduct).addClass('validationElement');
                        j$(disabilityServices).addClass('validationElement');                       
                    }else if(currentSection === 'essayDetailSection'){
                        shortEssayValidation.showAllMessages();                    
                        //j$(base30).addClass('validationElement');                    
                    }                    
                    self.setPassword(false); 
                }
                */
            }

                               
            self.saveFirstPage = function(saveAndCreateUser)
            {
                if(self.firstPageValidation.isValid())
                {
                    j$('#loadingIconText').show();                
                    j$('#loadingModal').modal('show');
                                   
                    var dob = j$('#studentDOB_alternate').val();
                    dob = new Date(dob);
                    var today = new Date();
                    var age = Math.floor((today-dob) / (365.25 * 24 * 60 * 60 * 1000));

                    if(age < 24){
                        self.under24(true);
                    }
                    else
                    {
                        self.under24(false);
                    }
                    
                    self.studentDetailsComplete(true);
                    self.emContInfoComplete(true);
                    self.citizenInfoComplete(true);     
                    self.veteranInfoComplete(true);
                    self.programInfoComplete(true);
                    self.emContInfoComplete(true);   
                    self.studentDetailsComplete(true);
                    
                    var chkUser={'email':self.studentEmail(),
                                'firstname':self.studentFirstName(),
                                'lastname':self.studentLastName(),
                                'phone':self.studentPhone()};
                                    
                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ApplicationController.checkIfUserAlreadyExists}',chkUser,
                        function(result)
                        {
                            if(result==true)
                            {
                                j$('#loadingModal').modal('hide');
                                j$('#applicationAlreadyExistsModal').modal('show'); 
                            }
                            else
                            {
                                if(saveAndCreateUser===true){
                                    self.saveStudentInfo();
                                    j$('#loadingModal').modal('hide');
                                    j$('#setPasswordModal').modal('show');
                                }
                                else{
                                    self.changeSections('educationDetailSection');
                                    self.saveStudentInfo();
                                }                       
                                
                            }   
                       },{buffer:true,escape : false});                    
                }
                else
                {
                    j$('#loadingModal').modal('hide');            
                    self.validatePages(self.firstPageValidation());                
                }
            }
            
            window.addEventListener("beforeunload", function (e) {
                document.cookie = "latestViewedApplication="+self.applicationId();
                if('{!schoolId}' != ''){
                    document.cookie = "latestViewedApplicationSchoolId="+'{!schoolId}';
                }
            });

            self.saveStudentInfo = function()
            {
                var schoolIdFromComponent = '{!schoolId}';
                if(schoolIdFromComponent == '')
                {
                    var tempComponent = document.cookie.split(';');
                    
                    for(var i =0; i<tempComponent.length;i++)
                    {
                      if(tempComponent[i].indexOf('latestViewedApplicationSchoolId') > -1)
                      {
                        var temp2Component = tempComponent[i].split('=');
                        
                        if(temp2Component[1] == '01')
                        {
                            self.leadSource('LAFSWEBAPP')
                        }
                        else if(temp2Component[1] == '02')
                        {
                            self.leadSource('LARSWEBAPP')
                        }
                      }                                      
                    }
                    if(self.leadSource() == '' || self.leadSource() == undefined){
                        self.leadSource('LAFSWEBAPP')
                    }
                }else{                    
                    if(schoolIdFromComponent == '01'){
                        self.leadSource('LAFSWEBAPP');                
                    }
                    else if(schoolIdFromComponent == '02'){
                        self.leadSource('LARSWEBAPP');
                    }
                    else{
                        self.leadSource('LAFSWEBAPP');
                    }
                }

                self.schoolId = ko.observable();
                var under24=self.under24();
                var phone=self.extractNumbers(j$('#txt_phone_number').intlTelInput("getNumber"));
                var alt_phone=self.extractNumbers(j$('#txt_alt_phone_number').intlTelInput("getNumber"));
                var em_phone=self.extractNumbers(j$('#txt_em_phone').intlTelInput("getNumber"));
                                      
                var studentDetails = {
                    studentFirstName : self.studentFirstName(),
                    studentLastName : self.studentLastName(),
                    studentDOB : (j$('#studentDOB_alternate').val()),
                    studentPhone : phone,
                    studentOtherPhone : alt_phone,
                    studentEmail : self.studentEmail(),
                    studentCountry : self.studentCountry(),
                    studentHomeAddress : self.studentHomeAddress(),
                    studentCity : self.studentCity(),
                    studentSelectedUsState : self.selectedUsState(),
                    studentSelectedProvince : self.selectedProvince(),
                    studentZip : self.studentZip(),
                    studentId : self.studentId(),
                    leadSource : self.leadSource(),
                    src : '{!att_src}',
                    lid : '{!att_lid}',
                    studentInfoComplete : self.studentDetailsComplete(),
                    householdId : self.householdId(),
                    setPassword : self.setPassword(),
                    under24 : self.under24(),
                    appId : self.applicationId(),
                    password:self.applicantPassword(),
                    emContFirstName : self.emContFirstName(),
                    emContLastName : self.emContLastName(),
                    emContPhone : em_phone,
                    emContRelation: self.emContRelation(),
                    programCode: self.programCode(),
                    prefStartPeriod: self.prefStartPeriod(),                        
                    version : self.programVersion(),
                    residentialStatus : self.residentialStatus(),
                    alienNumber : self.alienNumber(),
                    countryOfCitizenship : self.countryOfCitizenship().join(','),
                    visaType : self.visaType(),
                    ssNumber : self.ssNumber(),
                    visaExpirationDate : (j$('#visaExpirationDate_alternate').val()),
                    visaSchoolName : self.visaSchoolName(),
                    visaSchoolAddress : self.visaSchoolAddress(),
                    visaSchoolCity : self.visaSchoolCity(),
                    visaSchoolState : self.visaSchoolState(),
                    visaSchoolCountry : self.visaSchoolCountry(),
                    visaSchoolZip : self.visaSchoolZip(),
                    qualifyForBenefits : self.qualifyForBenefitsQuestion(),
                    militaryAffiliation : self.militaryAffiliation(),
                    militaryETS : (j$('#militaryETS_alternate').val()),
                    branchOfService : self.branchOfService(),
                    currentCertificate : self.currentCertificate(),
                    militaryStartDate : (j$('#militaryStartDate_alternate').val()),
                    militaryEndDate : (j$('#militaryEndDate_alternate').val()),
                    authorizeTranscript : self.authorizeTranscript()
                   
                }
                    
                if(self.doneSettingPassword()){
                    self.setPassword(false);                        
                }                    

                Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.ApplicationController.studentInfo}',studentDetails, under24,
                    function(result)
                    {
                        j$('#secondPageSaveAndExitButton').html('Save and Finish Later').removeClass('disabled').css('background-color','#000');
                        j$('#secondPageNextButton').html('Next').removeClass('disabled').css('background-color','#000');  
                                                  
                        self.applicationId(result['appId']);                                                      
                        if(self.setPassword())
                        {                                  
                            if(result['success'] === true){                                        
                                self.setPassword(false);  
                                self.doneSettingPassword(true); 
                                self.loginToApplication();
                             }
                             else
                             {
                                self.setPassword(true);
                                j$('#setPasswordErrorMessage').show();                
                                j$('#setPasswordModal').modal('show');    
                                j$('#loadingIconText').hide();                
                                j$('#loadingModal').modal('hide');                                         
                                if(result && result['error'] === true){
                                    j$('#setPasswordErrorMessage').html(result['errorMessage']);
                                    j$('#passwordsDoNotMatch').hide();
                                }
                            }
                        }
                        
                        if(result['studentToReturn']){
                            var studentContactObj = result['studentToReturn'];
                            self.householdId(studentContactObj['AccountId']);
                            self.studentId(studentContactObj['Id']);                                    
                        }
                        else
                        {
                            self.householdId(result['AccountId']);
                            self.studentId(result['Id']);  
                        }                               
                },{buffer:true,escape : false});
            }   
                                
            //parent info section               
            self.parentInfoComplete = ko.observable();
            self.parentId = ko.observable();        
            self.studentParentFirstName = ko.observable();
            self.isParent = ko.observable(false);
            self.studentParentLastName = ko.observable().extend({required:true});
            self.studentParentLastName.subscribe(function(number){
                if(number.length>0){
                    self.isParent(true);
                }
                else{
                    self.isParent(false);
                }
            });
            
            self.studentParentPhone = ko.observable();
            self.studentParentEmail =ko.observable().extend({
                required: {
                    params: true, message: 'Enter  Email Address' 
                } 
            }).extend({
                    pattern: {
                        params : /\S+@\S+\.\S+/,
                        message : 'Enter Valid Email Address'
                    }
            });
            
            
            self.populateSignature = function(){
                
                    var fullName = self.studentFirstName() + ' '+self.studentLastName();           
                    j$('#ApplicantSignature').val(fullName);
                    self.applicationSubmitted(true);
                
                
            }; 
            
            self.loginToApplication = function(){
                var currentSection =j$(".vwspc-section:visible").attr('id');
                j$('[id$="sectionName"]').val(currentSection);                            
                j$('[id$="applicantUserName"]').val(self.studentEmail());                            
                j$('[id$="applicantPassword"]').val(self.applicantPassword());                            
                j$('[id$="applicationIdAfterLogin"]').val(self.applicationId());                            
                loginToApplicationAfterResettingPassword();                                      
            }

            self.loginToApplicationGoToSection = function(goToThisSection){
                j$('[id$="sectionName"]').val(goToThisSection);                            
                j$('[id$="applicantUserName"]').val(self.studentEmail());                            
                j$('[id$="applicantPassword"]').val(self.applicantPassword());                            
                j$('[id$="applicationIdAfterLogin"]').val(self.applicationId());                            
                loginToApplicationAfterResettingPassword();                                      
            }
            
                        
            
            self.sameAsParent=function(){
                
                self.sameParent(self.sameParent());
                if(self.sameParent()){
                    self.emContFirstName(self.studentParentFirstName());
                    self.emContLastName(self.studentParentLastName());
                    self.emContRelation('Parent / Guardian');
                    if(self.studentParentPhone() != undefined){
                        self.emContPhone(self.intlNumber(self.studentParentPhone()));
                        j$('#txt_em_phone').intlTelInput("setNumber",self.studentParentPhone());
                    }                    
                }
                else {
                    self.emContFirstName("");
                    self.emContLastName("");
                    self.emContRelation("");
                    self.emContPhone("");
                }
                return true;
            };
            
                        //emergency contact information
            self.emContFirstName = ko.observable().extend({ required: true });
            self.emContInfoComplete = ko.observable();
            self.emContLastName = ko.observable().extend({ required: true });
            self.emContRelation = ko.observable().extend({ required: true });
            self.emContPhone = ko.observable().extend({
                required:true,
                validation:{
                    validator: function(){
                        return j$('#txt_em_phone').intlTelInput("isValidNumber");
                    }
                }
            });
            self.goToStudentDetailSection = function(){
                j$('html,body').animate({scrollTop: j$(studentDetailSection).offset().top}, 1000);                      
            }

                               

            //self.prefStartDate = ko.observable().extend({ required: true });
            //self.prefStartDateAlt = ko.observable();
            self.prefStartPeriod  = ko.observable().extend({required: {params:true, message: 'Expected start date is required'} });
            //self.prefStartPeriodOpt = ko.observable();
            self.prefStartPeriodOptions = ko.observableArray({!StartDateOptions});
            self.prefStartPeriod.subscribe(function(data){
                var ar=self.prefStartPeriodOptions();
                var found=false;
                for(var i=0; i<ar.length; i++){
                    if(ar[i]==data){
                        found=true;
                        break;
                    }
                }
                
                if(!found){
                    self.prefStartPeriodOptions.push(data);
                }
            });
            self.campusOptions = ko.observableArray(["On Campus", "Online"]);
            self.programOptions = ko.observable();
            self.selectedProgramCode = ko.observable();     
            self.programOptions = ko.observableArray([]);
            self.haveComputerSection = ko.observable(); 
            self.haveNoComputer = ko.observable(false);                 
            self.selectedCampus = ko.observable().extend({ required:{params:true,message:'Select Online or Oncampus'} });
            self.programOptionSection = ko.observable();            
            self.selectedProgram = ko.observable().extend({ required: true });
            
            self.onCampusPrograms=ko.observableArray([{value:'BSAVE',text:'Bachelor of Science in Animation'},
                                                {value:'BSAP',text:'Bachelor of Science in Audio Production'},
                                                {value:'BSFP',text:'Bachelor of Science in Film Production'},
                                                {value:'BSEB',text:'Bachelor of Science in Entertainment Business '},
                                                {value:'ASF',text:'Associate of Science in Film'},
                                                {value:'ASAP',text:'Associate of Science in Audio Production'},
                                                {value:'ASMP',text:'Associate of Science in Music Production'}]);
                                                
           self.onLinePrograms=ko.observableArray([{value:'BSDF-O',text:'Bachelor of Science in Digital Filmmaking Online'},
                                                {value:'BSEB-O',text:'Bachelor of Science in Entertainment Business Online'},
                                                {value:'BSGD-O',text:'Bachelor of Science in Graphic Design Online'},
                                                {value:'BSA-O',text:'Bachelor of Science in Animation Online'},
                                                {value:'ASMP-O',text:'Associate of Science in Music Production Online '}]);
                                                
           self.programVersions={'BSEB':['Full','Completer (Requires Associates Degree)'],
                               'BSAVE':['Visual Effects','Game Art'],
                               'BSFP':['Production','Cinematography','Directing','Producing'],
                               'BSEB-O':['Entertainment Business','Music Business'],
                               'BSA-O':['Character Animation','Visual Effects','Environment and Character Design']};
            
           self.selectedCampus.subscribe(function(newValue){
                if(newValue == 'On Campus'){
                    self.programOptionSection(true);
                    self.haveComputerSection(false);
                    self.programOptions(self.onCampusPrograms());
                }
                else if(newValue == 'Online'){
                    self.haveComputerSection(true);
                    self.programOptionSection(true);                          
                    self.programOptions(self.onLinePrograms());
                }
                else{
                    self.programOptionSection(false);
                    self.haveComputerSection(false);
                    //self.selectedProgram();
                }               
            }) 
            self.isVersionAvailable=ko.observable(false);
            self.programVersion=ko.observable().extend({
                required:{
                    onlyIf:function(){
                        if(self.programVersions[self.programCode()])
                            return true;
                        else
                            return false;
                    }
                }
            });

            self.programVersionOptions=ko.observableArray();
            
            self.programCode.subscribe(function(code){
                var ar;
                if(self.selectedCampus()=='On Campus'){
                    ar=self.onCampusPrograms();
                }
                else {
                    ar=self.onLinePrograms();
                }
                
                if(self.programVersions.hasOwnProperty(code)){
                    self.isVersionAvailable(true);
                    self.programVersionOptions(self.programVersions[code]);
                    self.programVersion('');
                }
                else {
                    self.isVersionAvailable(false);
                    self.programVersionOptions([]);
                    self.programVersion('');
                }
                
                for(var x in ar){
                    if(ar[x].value==code){
                        self.selectedProgram(ar[x].text);
                        return false;
                    }
                }
            });
                 
            
            
                       
            //educational background section
            self.highSchoolInfoComplete = ko.observable();          
            self.highSchoolName = ko.observable().extend({required: {params: true,message: "High school name is required"}});
            self.graduationDate = ko.observable().extend({validation: { validator: dateValidator2, message: 'Date is not in the correct format.' } });
            self.graduationDateAlt = ko.observable();
            self.degreeReceived = ko.observable();
            self.highSchoolAddress = ko.observable();
            self.highSchoolAddress2 = ko.observable();
            self.highSchoolCity = ko.observable().extend({required: {params: true,message: "High school city is required"}});
            self.highSchoolCountry = ko.observable().extend({required: {params: true,message: "High school country is required"}});
            self.highSchoolUsStates = ko.observable(true);
            self.selectedHighSchoolUsState = ko.observable().extend({
                required:{
                    onlyIf: function(){
                        return self.highSchoolCountry()=='United States' || !self.highSchoolCountry.isValid() || (self.highSchoolCountry()!='United States' && !self.selectedHighSchoolProvince.isValid());
                    },
                    message:'High school state is required'
                }           
            })
            self.highSchoolProvince = ko.observable();
            self.selectedHighSchoolProvince = ko.observable().extend({
                required:{
                    onlyIf: function(){
                        return self.highSchoolCountry()!='United States';
                    }
                },
                message:'High school province is required'          
            })
            self.highSchoolState = ko.observable();
            
            self.highSchoolCountry.subscribe(function(newValue){
                if(newValue == 'United States'){
                    self.highSchoolUsStates(true);
                    self.highSchoolProvince(false);
                    self.highSchoolProvince();
                    //self.studentState(self.selectedUsState());
                }
                else{                   
                    self.highSchoolUsStates(false);
                    self.highSchoolProvince(true);
                    self.highSchoolUsStates();
                    //self.studentState(self.selectedProvince());
                }       
            });
            self.highSchoolZip = ko.observable();
            self.iNotSendTranscript = ko.observable();
            //self.transcriptRequest = ko.observable().extend({ required: true });
            self.transcriptOptions = ko.observableArray(["I would like The Los Angeles Film School to request my transcript from my high school", "I will provide my high school transcript myself"]);          

            

            function criminalHistoryValidator(){

                if(self.criminalHistoryQuestion() != '' && self.criminalHistoryQuestion() != undefined){
                    if(self.criminalHistoryQuestion() == 'No'){
                        return '';
                    }
                    var explain = self.criminalHistoryExplain().trim();
                    if(explain == '' || explain == undefined){
                        return '#criminalHistoryExplain';
                    }
                    return '';
                }else{
                    return '#criminalHistoryOptions';
                }
            }




            function academicMisconductValidator(){
                               
                if(self.educationDisiplineQuestion() != '' && self.educationDisiplineQuestion() != undefined){
                    if(self.educationDisiplineQuestion() == 'No'){
                        return '';
                    }
                    var explain = self.educationDisciplineExplain().trim();
                    if(explain == '' || explain == undefined){
                        return '#educationDisciplineExplain';
                    } 
                    return '';                                   
                }else{
                    return '#educationDisiplineQuestion';
                }
            }
            
            self.saveSecondPage = function(saveAndCreateUser)
            {
                // if button text says please wait, exit function and user has to wait untill button text get changes
                if(j$(this).text().toLowerCase()=='please wait...' || !self.studentId() || !self.applicationId()){
                    return false;
                }
                
                if(self.secondPageValidation.isValid())
                {
                    j$('#loadingIconText').show();                
                    j$('#loadingModal').modal('show'); 

                    self.highSchoolInfoComplete(true); 
                    self.collegeInfoComplete(true);
                    self.disabilityInfoComplete(true);
                    self.criminalInfoComplete(true);
                    self.disciplineInfoComplete(true);           
                    var educationAndBackgroundDetails = {
                        applicationId : self.applicationId(),
                        studentId : self.studentId(),
                        setPassword : self.setPassword(),      
                        password : self.applicantPassword(),                                                                                                                  
                        highSchoolName : self.highSchoolName(),
                        graduationDate : j$('#graduationDate_alternate').val(),
                        degreeReceived : self.degreeReceived(),
                        highSchoolAddress : self.highSchoolAddress(),
                        highSchoolAddress2 : self.highSchoolAddress2(),
                        highSchoolCity : self.highSchoolCity(),
                        highSchoolState : self.highSchoolState(),
                        highSchoolZip : self.highSchoolZip(),
                        highSchoolCountry : self.highSchoolCountry(),
                        highSchoolSelectedUsState : self.selectedHighSchoolUsState(),
                        highSchoolSelectedProvince : self.selectedHighSchoolProvince(),
                        college1Name : self.college1Name(),
                        college1GraduationDate : (j$('#college1GraduationDate_alternate').val()),
                        college1DegreeReceived : self.college1DegreeReceived(),
                        college2Name : self.college2Name(),
                        college2GraduationDate : (j$('#college2GraduationDate_alternate').val()),
                        college2DegreeReceived : self.college2DegreeReceived(),
                        collegeNotes : self.collegeNotes(),
                        disabilityServicesQuestion : self.disabilityServicesQuestion(),
                        disabilityServicesExplanation : self.disabilityServicesExplain(),
                        criminalHistoryQuestion : self.criminalHistoryQuestion(),
                        criminalHistoryExplain : self.criminalHistoryExplain(),
                        educationHistoryQuestion : self.educationDisiplineQuestion(),
                        educationHistoryExplain : self.educationDisciplineExplain()               
                    }                                                                                                                                                                                                                                                                                                                                                      
                    
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.ApplicationController.SaveEducationAndBackgroundInfo}',educationAndBackgroundDetails,  
                        function(result)
                        {                             
                            //j$('#educationDetailSectionPill').attr('class','ui-state');
                            if(saveAndCreateUser===true){
                                j$('#loadingModal').modal('hide');
                                j$('#setPasswordModal').modal('show');
                            }
                            else{
                                self.changeSections('essayDetailSection');
                            }                                                                                                                 
                        },{escape : false});                
                }
                else
                {
                    // display red borders around text boxes when data entry errors
                    self.validatePages(self.secondPageValidation());
                }
            }


                        //college details section
            self.collegeInfoComplete = ko.observable();
            self.college1Name = ko.observable();
            self.college1GraduationDate = ko.observable();
            self.college1GraduationDateAlt = ko.observable();
            self.college1DegreeReceived = ko.observable();
            self.college2Name = ko.observable();
            self.college2GraduationDate = ko.observable();
            self.college2GraduationDateAlt = ko.observable();
            self.college2DegreeReceived = ko.observable(); 
            self.collegeNotes = ko.observable();

            
            //citizenship details section
            self.citizenInfoComplete = ko.observable();
            self.residentialStatus = ko.observable().extend({ required: true });
            self.international=ko.observable(false);
            self.residentialStatus.subscribe(function(code){
                
                if(code=='I am an international student'){
                    self.international(true);
                    self.militaryFileUpload(false);
                }
                else {
                    self.international(false);
                }
            });
            self.residentialStatusOptions = ko.observableArray(["I am a citizen of the United States", "I am a legal resident of the United States", "I am an international student"]);
            self.alienNumberSection = ko.observable();
            self.alienNumber = ko.observable();
            self.countryOfCitizenshipSection = ko.observable();
            self.visaTypeSection = ko.observable();
            self.ssNumberSection = ko.observable();
            self.ssNumber = ko.observable(' ').extend({
                minLength: {
                    params:9, 
                    message:'Social Security Number is required',
                    onlyIf:function()
                    {
                        if(self.residentialStatus() === "I am a citizen of the United States")
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    },
               }, 
               maxLength:9,
               required:{
                    onlyIf:function()
                    {
                        if(self.residentialStatus() === "I am a citizen of the United States")
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    },
                    message:'Social Security Number is required'
                }
           });
           self.ssNumber.subscribe(function(newValue){
               if(newValue && newValue.length==9)
               {
                   j$('#ssn').removeClass('validationElement');
               }
           });
            self.ssNumberAlt = ko.computed({
                read:function(){
                    if(self.ssNumber()){
                        var n=self.ssNumber().replace(/[^0-9\*]/g, '');
                        var l=n.length;
                        if(l>=9){
                            var a=n.substring(l-4,l);
                            return '***-**-'+a;
                        }
                    }
                },
                write: function(value){
                    self.ssNumber(value.replace(/[^0-9]/g,''));
                },
                required:false
            });
            
            self.alienNumberSection = ko.observable(); 
            self.visaExpirationDateSection = ko.observable(false);
            self.residentialStatus.subscribe(function(newValue){
                if(newValue == 'I am a citizen of the United States'){
                    self.internationalFileUpload(false);                                
                    self.alienNumberSection(false);
                    self.countryOfCitizenshipSection(false);
                    self.visaTypeSection(false);
                    self.visaExpirationDateSection(false);
                    self.ssNumberSection(true); 
                    j$('#ssnRequired').css('display','inline');
                    j$('#militaryInformation').show();
                    //self.ssNumber = ko.observable().extend({ required: true }); 
                    //self.ssNumberAlt = ko.observable().extend({ required: true }); 
                    
                    //citizenDetailsInfoValidation = ko.validation.group({self.residentialStatus,self.ssNumberAlt,self.ssNumber, self.countryOfCitizenship});               
                }
                if(newValue == 'I am an international student'){
                    self.internationalFileUpload(true);                 
                    self.countryOfCitizenshipSection(true);
                    self.visaTypeSection(true);
                    self.alienNumberSection(false);
                    self.visaExpirationDateSection(true);
                    self.ssNumberSection(false);
                    j$('#militaryInformation').hide();
                    //self.ssNumber = ko.observable().extend({ required: false }); 
                    //self.ssNumberAlt = ko.observable().extend({ required: false }); 
                    //citizenDetailsInfoValidation = ko.validation.group({self.residentialStatus,self.countryOfCitizenship});
                }
                if(newValue == 'I am a legal resident of the United States'){
                    self.internationalFileUpload(false);//true
                    self.alienNumberSection(true);
                    self.countryOfCitizenshipSection(false);
                    self.visaTypeSection(false);
                    self.visaExpirationDateSection(false);
                    self.ssNumberSection(true); 
                    j$('#ssnRequired').css('display','none');
                    j$('#militaryInformation').show();
                }               
            });
            self.countryOfCitizenship = ko.observableArray().extend({ required:  {onlyIf:function(){

                if(self.residentialStatus()=="I am an international student"){
                    return true;
                }
                else
                {
                    return false;
                }
            }}});
            self.visaType = ko.observable();
            
            self.visaExpirationDate = ko.observable();
            self.visaExpirationDate.subscribe(function(date){
                if(date==''){
                    j$('#visaExpirationDate_alternate').val('');
                }
            });
            self.visaExpirationDateAlt = ko.observable();
            self.visaTypeOptions = ko.observableArray(["None","F-1 Visa(Student Visitor)", "J-1 Visa(Exchange Visitor)", "M-1 Visa(Vocational Student)","B1/2","A1/A2"]);
            self.visaSchoolName = ko.observable();
            self.visaSchoolAddress = ko.observable();
            self.visaSchoolCity = ko.observable();
            self.visaSchoolState = ko.observable();
            self.visaSchoolZip = ko.observable();
            self.visaSchoolCountry = ko.observable();
            self.visaType.subscribe(function(newValue){
                if(newValue == "None"){
                    self.visaExpirationDateSection(false);
                }
                else{
                    self.visaExpirationDateSection(true);
                }           
            });



            function programInfoValidator(){
              
                if(self.programCode() == '' || self.programCode() == undefined){
                        return '#programCode';                    
                }
                if(self.isVersionAvailable()  && !self.programVersion()){
                     return '#programVersion';
                }

                return '';
                
            }

            function citizenshipValidator(){
                if(self.residentialStatus() == 'I am a citizen of the United States'){
                    if(self.ssNumber() != '' || self.ssNumber() != undefined){
                        if(self.ssNumber().length != 9){
                            return '#ssn';
                        }
                        return '';
                    }
                    return false;                    
                }else if(self.residentialStatus() == 'I am an international student'){
                    if(self.countryOfCitizenship() != '' || self.countryOfCitizenship() != undefined){
                        return '';
                    }
                    return '#countryCitizen';
                }else if(self.residentialStatus() == 'I am a legal resident of the United States'){
                    return '';
                }else{
                    return '#residentialStatusOptions';
                }
            }

           
           
           //veteran benefit section
            self.qualifyForBenefitsQuestion = ko.observable();
            self.veteranInfoComplete = ko.observable();
            self.qualifySection = ko.observable();
            self.qualifyForBenefits = ko.observable();
            self.militaryAffiliation = ko.observable();
            self.paymentAmount = ko.observable('75.00');
            
            self.militaryAffiliation.subscribe(function(newValue){
                if(newValue=='ACT' || newValue=='VET' || newValue=='MDEP'){
                    self.paymentAmount('50.00');
                }
                else{
                    self.paymentAmount('75.00');   
                }
            });
            self.qualifyForBenefitsQuestion.subscribe(function(newValue){
                if(newValue == "Yes"){
                    self.qualifySection(true);
                    self.qualifyForBenefits(true);
                    self.militaryFileUpload(true);
                }
                else if(newValue == "No"){
                    
                    self.qualifySection(false);
                    self.qualifyForBenefits(false);
                    self.militaryFileUpload(false);
                }
                else{
                    self.qualifySection(false);
                    self.qualifyForBenefits(false);
                    self.militaryFileUpload(false);
                }
            });
            
            self.militaryETS = ko.observable();
            self.militaryETS.subscribe(function(date){
                if(date==''){
                    j$('#militaryETS_alternate').val('');
                }
            });
            self.militaryAffiliationOptions = ko.observableArray([{value:'ACT',text:'Active Duty'},{value:'MDEP',text:'Dependent'},{value:'RESR',text:'Reservist or National Guard'},{value:'VET',text:'Veteran'}]);
            self.branchOfService = ko.observable();
            self.branchOfServiceOptions = ko.observableArray(["Air Force","Army","Coast Guard", "Marine Corps", "Navy"]);
            self.currentCertificate = ko.observable(null);
            self.militaryStartDate = ko.observable();
            self.militaryStartDateAlt = ko.observable();
            self.militaryStartDate.subscribe(function(date){
                if(date==''){
                    j$('#militaryStartDate_alternate').val('');
                    self.militaryStartDateAlt('');
                }
            });
            
            self.militaryEndDate = ko.observable();
            self.militaryEndDateAlt = ko.observable();
            self.militaryEndDate.subscribe(function(date){
                if(date==''){
                    j$('#militaryEndDate_alternate').val('');
                    self.militaryEndDateAlt('');
                }
            });
            
            self.authorizeTranscript = ko.observable(null); 
            
            
            //short essay section                       
            self.shortEssayComplete = ko.observable();
            self.shortEssay = ko.observable().extend({ 
                required:{
                    onlyIf:function(){
                        if(self.international()){
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
               }
           });
            self.shortEssay.subscribe(function(newValue){
               if(self.shortEssay.isValid()){
                   j$('#cke_shortEssay').removeClass('validationElement');
               }
            });

            //previous history section
            self.criminalInfoComplete = ko.observable();    
            self.criminalHistoryQuestion = ko.observable().extend({required: {params: true,message: "Please answer criminal history"}});
            self.criminalHistoryExplainSection = ko.observable();
            self.criminalHistoryExplain = ko.observable(' ').extend({
                required: {
                    message:'Please explain criminal history',
                    onlyIf: function() {
                        return self.criminalHistoryQuestion() == 'Yes';
                    }
                }
            });
            self.criminalHistoryQuestion.subscribe(function(newValue){                
                if(newValue == 'Yes'){
                    self.criminalHistoryExplainSection(true);                   
                }
                else {
                    self.criminalHistoryExplainSection(false);
                }
            })

            


            

            //previous history section 2
            self.disciplineInfoComplete = ko.observable();          
            self.educationDisiplineQuestion = ko.observable().extend({required: {params: true,message: "Please answer academic misconduct"}});
            self.educationDisciplineExplainSection = ko.observable();
            self.educationDisciplineExplain = ko.observable(' ').extend({
                required: {
                    message:'Please explain academic misconduct',
                    onlyIf: function(val) {
                        return self.educationDisiplineQuestion()==='Yes';
                    }
                }
            });
            self.educationDisiplineQuestion.subscribe(function(newValue){
                if(newValue == 'Yes'){
                    self.educationDisciplineExplainSection(true);
                }
                else{
                    self.educationDisciplineExplainSection(false);
                }
            })
            
            //disabilites section
            self.disabilityInfoComplete = ko.observable();
            self.disabilityServicesQuestion = ko.observable().extend({required: {params: true,message: "Disability status is required"}});
            self.disabilityServiceOptions = ko.observableArray(["Yes, I will be requesting the use of auxiliary aids and/or services as described above.", "No, I will NOT by requesting the use of auxiliary aids and/or services as described above."]);
            self.disabilityServicesExplainSection = ko.observable();
            self.disabilityServicesExplain = ko.observable(' ').extend({
                required: {
                    message: "Please explain disability",
                    onlyIf: function() {
                        return ((self.disabilityServicesQuestion() && self.disabilityServicesQuestion().startsWith('Yes'))?true:false);
                    }
                }
            });
            self.disabilityServicesQuestion.subscribe(function(newValue){
                if(newValue == 'Yes, I will be requesting the use of auxiliary aids and/or services as described above.'){
                    self.disabilityServicesExplainSection(true);
                }
                else if(newValue == 'No, I will NOT by requesting the use of auxiliary aids and/or services as described above.'){
                    self.disabilityServicesExplainSection(false);
                }
                else{
                    self.disabilityServicesExplainSection(false);
                }
            })

            function disabilityServicesValidator(){
              
                if(self.disabilityServicesQuestion() != '' && self.disabilityServicesQuestion() != undefined){
               
                    if(self.disabilityServicesQuestion() == 'No, I will NOT by requesting the use of auxiliary aids and/or services as described above.'){
                        console.log('inside if answer no------------------------------>>>>',self.disabilityServicesExplain());                
                        return '';
                    }
                    var explain = self.disabilityServicesExplain().trim();
                    if(explain == '' || explain == undefined){              
                        return '#disabilityServicesExplain';
                    } else{
                        return '';
                    }                                    

                }else{
                    return '#disabilityServicesQuestion';
                }
            }

            //statistics section
            self.statisticalInfoComplete = ko.observable();
            self.genderOptions = ko.observableArray(["Female", "Male", "Not Specified"]);
            self.genderQuestion = ko.observable();
            self.ethnicityOptions = ko.observableArray(["African American (Non-Hispanic)", "American Indian or Alaskan Native", "Asian or Pacific Islander", "Multi-ethnic background","Hispanic or Latino", "White (non-Hispanic)", "Other"]);
            self.ethnicityQuestion = ko.observable();
            self.nationalityOptions = ko.observableArray(["American", "Canadian", "Chinese", "French", "Italian","Japanese", "Other"]);
            self.nationalityQuestion = ko.observable();
            
            //refer a friend section
            self.referralInfoComplete = ko.observable();
            self.referralId = ko.observable();
            self.referFriendQuestion = ko.observable();
            self.friendInfoSection = ko.observable();
            self.friendFirstName = ko.observable();
            self.friendLastName = ko.observable(); 
            
            
            self.friendEmail = ko.observable().extend({
                        required: {
                            onlyIf: function(){
                                return self.referFriendQuestion() === 'Yes';
                                
                            },
                        
                            params: true, message: 'Enter  Email Address' 
                        } 
                        }).extend({
                                pattern: {
                                    params : /\S+@\S+\.\S+/,
                                    message : 'Enter Valid Email Address'
                                }
            });
            
            self.friendPhone = ko.observable().extend({
                required:{
                    onlyIf: function(value){
                        if(j$('#txt_ref_phone').intlTelInput("getNumber")!='' && j$('#txt_ref_phone').intlTelInput("isValidNumber")==false){
                            return true;
                        }else{
                            return false;
                        }
                    }
                },
                validation:{
                    validator: function(){
                        return (j$('#txt_ref_phone').intlTelInput("isValidNumber") || j$('#txt_ref_phone').intlTelInput("getNumber")=='');
                    }
                }
            });
            self.friendOther = ko.observable();
            self.referFriendQuestion.subscribe(function(newValue){
                if(newValue == "Yes"){
                    self.friendInfoSection(true);
                    j$(".intl:visible").intlTelInput({utilsScript: "{!URLFOR($Resource.IntlTelFomat, 'js/utils.js')}"});
                }
                else if(newValue == "No"){
                    self.friendInfoSection(false);
                }
                else{
                    self.friendInfoSection(false);
                }
            })    
            self.refFriend=ko.observable(false);  
            
            self.refButtonText=function(){
                if(self.refFriend()){
                    return 'Please Wait..';
                }
                else if(self.referAFriendInfoIsEdit()){
                    return'Accept'
                }
                else {
                    return 'Next';
                }
            }  
            
            // file upload section
            self.allDocsIn = ko.observable();
            self.internationalFileUpload = ko.observable();
            self.militaryFileUpload = ko.observable();
            self.photoIdSubmitted = ko.observable();
            self.HSDiplomaSubmitted = ko.observable();
            self.HSDiplomaSubmitted1 = ko.observable();
            self.CCAFSumbitted = ko.observable();
            self.DD214Submitted = ko.observable();
            self.passportSubmitted = ko.observable();
            self.I20Submitted = ko.observable();
            self.USVisaSubmitted = ko.observable();
            self.I94Submitted = ko.observable();
            self.TOEFLSubmitted = ko.observable();
            self.compSpecsSubmitted = ko.observable();
            self.I539Submitted = ko.observable();
            self.collegeTranscriptsSubmitted = ko.observable();
            self.masterPromissoryNoteSubmitted = ko.observable();
            self.wardOfCourtDocSubmitted = ko.observable();
            self.legalGuardianshipDocSubmitted = ko.observable();
            self.dependencyOverrideStmtSubmitted = ko.observable();
            self.defaultResolutionLetterSubmitted = ko.observable();
            self.ISIRCCode146Submitted = ko.observable();
            self.ISIRCCode030ubmitted = ko.observable();
            self.w2FormSubmitted = ko.observable();
            self.studentTaxTranscriptsSubmitted = ko.observable();
            self.studentTaxReturnSubmitted = ko.observable();
            self.spouseTaxTranscriptSubmitted = ko.observable();
            self.spouseTaxReturnSubmitted = ko.observable();
            self.parentTaxTranscriptsSubmitted = ko.observable();
            self.parentTaxReturn2017Submitted = ko.observable();
            self.PLUSMasterPromissorySubmitted = ko.observable();
            self.EntranceCounselingSubmitted = ko.observable();
            self.bankStatementSubmitted = ko.observable();
            self.HSTranscriptEvaluationSubmitted = ko.observable();
            self.enrollmentPacketStatus = ko.observable();
            self.docuSignList = ko.observable();
            
            self.I539Status = ko.observable();
            self.I539SubStatus = ko.observable();

            self.collegeTranscriptsStatus = ko.observable();
            self.masterPromissoryNoteStatus = ko.observable();
            self.wardOfCourtDocStatus = ko.observable();
            self.legalGuardianshipDocStatus = ko.observable();
            self.dependencyOverrideStmtStatus = ko.observable();
            self.defaultResolutionLetterStatus = ko.observable();
            self.ISIRCCode146Status = ko.observable();
            self.ISIRCCode030Status = ko.observable();
            self.w2FormStatus = ko.observable();
            self.studentTaxTranscriptsStatus = ko.observable();
            self.studentTaxReturnStatus = ko.observable();
            self.spouseTaxTransStatus = ko.observable();
            self.spouseTaxReturnStatus = ko.observable();
            self.parentTaxTranscriptsStatus = ko.observable();
            self.parentTaxReturnStatus = ko.observable();
            self.PLUSMasterPromissoryStatus = ko.observable();
            self.EntranceCounselingSubStatus = ko.observable();
            self.collegeTransStatus = ko.observable();
            self.compSpecsStatus = ko.observable();
            self.computerSpecsStatus = ko.observable();
            self.photoIdStatus = ko.observable();
            self.parentsPhotoIDStatus = ko.observable();
            self.HSDiplomaStatus = ko.observable();
            self.hsDiplomaStats = ko.observable();
            self.CCAFStatus = ko.observable();
            self.CCAFSumbStatus = ko.observable();
            self.DD214Status = ko.observable();
            self.DD214SubStatus = ko.observable();
            self.passportStatus = ko.observable();
            self.passportSubStatus = ko.observable();
            self.I20Status = ko.observable();
            self.I20SubmittedStatus = ko.observable();
            self.USVisaStatus = ko.observable();
            self.USVisaSubStatus = ko.observable();
            //  self.I94SubmittedStatus=ko.observable();
            self.I94Status = ko.observable();
            self.I94SubStatus = ko.observable();
            self.TOEFLStatus = ko.observable();
            self.TOEFLSubStatus = ko.observable();
            self.bankStatementStatus = ko.observable();
            self.bankStatementSubStatus = ko.observable();
            self.HSTransriptEvaluationStatus = ko.observable();
            
            //file upload 
            var maxStringSize = 6000000;    //Maximum String size is 6,000,000 characters
            var maxFileSize = 4350000;      //After Base64 Encoding, this is the max file size
            var chunkSize = 950000;         //Maximum Javascript Remoting message size is 1,000,000 characters
            var attachment;
            attachmentName=[];
            var fileSize;
            var positionIndex;
            var doneUploading; 
            var attachmentBody;
            var fileType;
            self.uploadable=ko.observable(true);



             
                
            //Method to prepare a file to be attached to the Account bound to the page by the standardController
            self.uploadAttach = function(fileName, id) 
            {
                  if(!self.uploadable()){
                      return;
                  }
                  
                  var file = document.getElementById(id).files[0];
                  var fileSplit = file.name.split('.');
                  var fileExt = '';
                  if (fileSplit.length > 1) {
                     fileExt = fileSplit[fileSplit.length - 1];
                  } 

                 
                  if(file != null) {
                    if(file.size <= maxFileSize) {
                      //attachmentName = fileName;
                        attachmentName = fileName + '.' + fileExt;
                        fileType = fileExt;
                        // attachmentName = fileName ;
                      var fileReader = new FileReader();
                      fileReader.onloadend = function(e) {
                      
                        attachment = window.btoa(this.result);  //Base 64 encode the file before sending it
                        attachmentBody=attachment.match(/.{1,950000}/g);
                        positionIndex=0;
                        fileSize = attachment.length;

                        doneUploading = false;
                        if(fileSize < maxStringSize) {
                            self.uploadable(false);
                            self.uploadAttachment(attachmentName);
                        } else {
                          alert("File is too large.  Maximum size is " + maxStringSize + " your file is " + fileSize + ".");
                        }                            
                      }
                      fileReader.onerror = function(e) {
                        alert("There was an error reading the file.  Please try again.");
                      }
                      fileReader.onabort = function(e) {
                        alert("There was an error reading the file.  Please try again.");
                      }  

                      fileReader.readAsBinaryString(file);

                     
                    } else {
                      alert("File must be under 4.3 MB in size.  Your file is too large.  Please try again.");
                    }
                  } else {
                    alert("You must choose 45 a file before trying to upload it" + fileName);
                  }
                }                    
                //Method to send a file to be attached to the Application bound to the page by the Controller
                //Sends parameters: Account Id, Attachment (body), Attachment Name, and the Id of the Attachment if it exists to the controller   
                self.uploadAttachment = function(fileId, index, id) {

                      if(typeof index === "undefined"){
                          index=0;
                      }
                      
                      if(typeof id === "undefined"){
                          id='NULL';
                      }
                      
                      var fileData = {
                        applicationId : self.applicationId(),
                        attachmentName : attachmentName,
                        fileId : fileId,
                        fileType : fileType,                         
                      }
                      

                      fileData['attachmentBody']=attachmentBody[index];

                        ApplicationController.doUploadAttachment(fileData, id,
                            function(result, event) {
                                
                            if(event.status!=='exception')
                            {
                                    if(index==attachmentBody.length-1){
                                        var fileName = attachmentName.replace(/\.[^/.]+$/, "");
                                          Visualforce.remoting.Manager.invokeAction(
                                          '{!$RemoteAction.ApplicationController.updateUploads}', fileName, self.applicationId(),
                                           function(result){                           
                                           },{escape:true});
                                           self.uploadable(true);
                                           if(fileName == 'I539'){
                                                self.I539Submitted(true);
                                                self.I539Status('Received. Thank You.');
                                            } 
                                            else if(fileName == 'I-539'){
                                                self.I539Submitted(true);
                                                self.I539SubStatus('Received. Thank You.');
                                            } 
                                            else if(fileName == 'College Transcripts'){
                                                self.collegeTranscriptsSubmitted(true);
                                                self.collegeTranscriptsStatus('Received. Thank You.');
                                            }else if(fileName == 'wardOfCourtDoc'){
                                                self.wardOfCourtDocSubmitted(true);
                                                self.wardOfCourtDocStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'masterPromissoryNote'){
                                                self.masterPromissoryNoteSubmitted(true);
                                                self.masterPromissoryNoteStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'legalGuardianshipDoc'){
                                                self.legalGuardianshipDocSubmitted(true);
                                                self.legalGuardianshipDocStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'dependencyOverrideStmt'){
                                                self.dependencyOverrideStmtSubmitted(true);
                                                self.dependencyOverrideStmtStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'defaultResolutionLetter'){
                                                self.defaultResolutionLetterSubmitted(true);
                                                self.defaultResolutionLetterStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'ISIRCCode146'){
                                                self.ISIRCCode146Submitted(true);
                                                self.ISIRCCode146Status('Received. Thank You.');
                                            }
                                            else if(fileName == 'ISIRCCode030'){
                                                self.ISIRCCode030ubmitted(true);
                                                self.ISIRCCode030Status('Received. Thank You.');
                                            }
                                            else if(fileName == 'w2Form'){
                                                self.w2FormSubmitted(true);
                                                self.w2FormStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'studentTaxTranscripts'){
                                                self.studentTaxTranscriptsSubmitted(true);
                                                self.studentTaxTranscriptsStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'studentTaxReturn'){
                                                self.studentTaxReturnSubmitted(true);
                                                self.studentTaxReturnStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'spouseTaxTranscript'){
                                                self.spouseTaxTranscriptSubmitted(true);
                                                self.spouseTaxTransStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'spouseTaxReturn'){
                                                self.spouseTaxReturnSubmitted(true);
                                                self.spouseTaxReturnStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'parentTaxTranscripts'){
                                                self.parentTaxTranscriptsSubmitted(true);
                                                self.parentTaxTranscriptsStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'parentTaxReturn'){
                                                self.parentTaxReturn2017Submitted(true);
                                                self.parentTaxReturnStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'collegeTranscript'){
                                                self.collegeTranscriptsSubmitted(true);
                                                self.collegeTransStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'Photo Id'){
                                                self.photoIdSubmitted(true);
                                                self.photoIdStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'parentsPhotoID'){
                                                self.photoIdSubmitted(true);
                                                self.parentsPhotoIDStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'Computer Specs'){
                                                self.compSpecsSubmitted(true);
                                                self.compSpecsStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'computerSpecs'){
                                                self.compSpecsSubmitted(true);
                                                self.computerSpecsStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'High School Diploma'){
                                                self.HSDiplomaSubmitted1(true);
                                                self.HSDiplomaStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'EntranceCounseling'){
                                                self.EntranceCounselingSubmitted(true);
                                                self.EntranceCounselingSubStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'PLUSMasterPromissory'){
                                                self.PLUSMasterPromissorySubmitted(true);
                                                self.PLUSMasterPromissoryStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'hsDiploma'){
                                                self.HSDiplomaSubmitted(true);
                                                self.hsDiplomaStats('Received. Thank You.');
                                            }
                                            else if(fileName == 'CCAF'){
                                                self.CCAFSumbitted(true);
                                                self.CCAFStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'CCAF'){
                                                self.CCAFSumbitted(true);
                                                self.CCAFSumbStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'DD-214'){
                                                self.DD214Submitted(true);
                                                self.DD214Status('Received. Thank You.');
                                            }
                                            else if(fileName == 'DD214'){
                                                self.DD214Submitted(true);
                                                self.DD214SubStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'Passport'){
                                                self.passportSubmitted(true);
                                                self.passportStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'passport'){
                                                self.passportSubmitted(true);
                                                self.passportSubStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'I-20'){
                                                self.I20Submitted(true);
                                                self.I20Status('Received. Thank You.');
                                            }
                                            else if(fileName == 'i20'){
                                                self.I20Submitted(true);
                                                self.I20SubmittedStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'USVisa'){
                                                self.USVisaSubmitted(true);
                                                self.USVisaSubStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'US Visa'){
                                                self.USVisaSubmitted(true);
                                                self.USVisaStatus('Received. Thank You.');
                                            }
                                            
                                            else if(fileName == 'I94'){
                                                self.I94Submitted(true);
                                                self.I94SubStatus('Received. Thank You.');
                                            }
                                          else if(fileName == 'I-94'){
                                                self.I94Submitted(true);
                                                self.I94Status('Received. Thank You.');
                                            }
                                            else if(fileName == 'TOEFL Scores'){
                                                self.TOEFLSubmitted(true);
                                                self.TOEFLStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'TOEFL'){
                                                self.TOEFLSubmitted(true);
                                                self.TOEFLSubStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'Bank Statements'){
                                                self.bankStatementSubmitted(true);
                                                self.bankStatementStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'bankStatement'){
                                                self.bankStatementSubmitted(true);
                                                self.bankStatementSubStatus('Received. Thank You.');
                                            }
                                            else if(fileName == 'HSTransriptEvaluation'){
                                                self.HSTranscriptEvaluationSubmitted(true);
                                                self.HSTransriptEvaluationStatus('Received. Thank You.');
                                            }
                                           return;
                                    }
                                    else {
                                        self.uploadAttachment(result,++index,result);
                                    }
                                }
                         },{buffer: true, escape: true, timeout: 120000});

                      
                    }


            self.goBackToSubmissionSection = function(){
                self.goToThisSection('submissionSection');                                                              
                self.submissionDetails(true);                                                               
                j$('html,body').animate({scrollTop: j$(submissionSection).offset().top}, 1000);
            }                       
            //acceptance/summary section            
            self.acceptedAgreement = ko.observable();
            self.acceptanceInfoComplete = ko.observable();  

            self.validatePages=function(controlls){
                for(var key in controlls)
                {
                    if(controlls[key].isValid()){
                        j$('#'+key.trim()).removeClass("validationElement");
                        j$('#1'+key.trim()).removeClass("validationElement");
                    }
                    else{
                        j$('#'+key.trim()).addClass("validationElement");
                        j$('#1'+key.trim()).addClass("validationElement");
                    }
                }
            }

            self.saveThirdPage = function(saveAndCreateUser)
            {          
                // if all set on third page, update salesforce and display login screen when there is no user created
                // if there is an user already, display the upload section
                if(!self.studentId() || !self.applicationId()){
                    return false;
                }
                
                if(self.thirdPageValidation.isValid())
                { 
                    j$('#loadingModal').modal('show');
                    
                    var fPhone=self.extractNumbers(j$('#txt_ref_phone').intlTelInput("getNumber"));
        
                    var dataset ={studentId : self.studentId(),
                        applicationId : self.applicationId(),
                        shortEssay : self.shortEssay(),
                        ssn:self.ssNumber(),
                        studentFirstName:self.studentFirstName(),
                        studentLastName:self.studentLastName(),
                        gender : self.genderQuestion(),
                        ethnicity : self.ethnicityQuestion(),
                        nationality : self.nationalityQuestion(),
                        referFriendQuestion : self.referFriendQuestion(),
                        friendFirstName : self.friendFirstName(),
                        friendLastName : self.friendLastName(),
                        friendPhone : fPhone,
                        friendEmail : self.friendEmail(),
                        leadSource : self.leadSource()};   
                                                
                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ApplicationController.applicationFinalSubmit}', dataset, 
                            function(result)
                            {  
                                j$('#loadingModal').modal('hide');
                                
                                if(!result.community_user){
                                    j$('#setPasswordModal').modal('show');
                                }
                                else
                                {
                                    self.appFinalized(true);
                                    j$('#sectionListPanel').css('display','none');
                                    self.changeSections('uploadDetailsSection'); 
                                }
                            },{escape : false});
                }
                else
                {
                    j$('#loadingModal').modal('hide');
                    self.validatePages(self.thirdPageValidation());
                }
            }

            self.appFinalized = ko.observable();        
           
            
            //required document upload logic
            self.completerDocsIn = ko.observable();
            self.onlineDocsIn = ko.observable();
            self.militaryDocsIn = ko.observable();
            self.internationalDocsIn = ko.observable();
            
            //in the bs of entertain completer
            if(self.selectedProgram() == 'Bachelor of Science in Entertainment Completer'){
                if(self.collegeTranscriptsSubmitted()){
                    self.completerDocsIn(true);
                }
                else{
                    self.completerDocsIn(false);
                }
            }
            else{
                self.completerDocsIn(true);
            }
            //online campus
            if(self.selectedCampus() == 'Online'){
                if(self.photoIdSubmitted()){
                    if(self.haveNoComputer()){
                        if(self.compSpecsSubmitted()){
                            self.onlineDocsIn(true);
                        }
                        else{
                            self.onlineDocsIn(false);
                        }
                    }
                    else{
                        self.onlineDocsIn(true);
                    }           
                }
                else{
                    self.onlineDocsIn(false);
                }   
            }
            else{
                self.onlineDocsIn(true);
            }
            //military docs
            if(self.militaryFileUpload()){//eligible for military benefits
                if(self.militaryAffiliation() != 'ACT'){//is eligible for benefits, not active duty
                    if(self.DD214Submitted()){//is eligible for benefits,not active duty, dd214 in
                        if(self.branchOfService() == 'Air Force'){//is eligible for benefits,not active duty, dd214 in, in air force
                            if(self.CCAFSumbitted()){//is eligible for benefits,not active duty, dd214 in, in air force, ccaf in
                                self.militaryDocsIn(true);
                            }
                            else{//is eligible for benefits,not active duty, dd214 in, in air force, ccaf not in
                                self.militaryDocsIn(false);
                            }
                        }
                        else{//is eligible for benefits,not active duty,dd214 in, not air force
                            self.militaryDocsIn(true);
                        }
                    }
                    else{//is eligible for benefits,not active duty, dd214 not in
                        self.militaryDocsIn(false);
                    }
                }
                else{//is eligible for benefits,is active duty
                    if(self.branchOfService() == 'Air Force'){//is eligible for benefits,is active duty, is in air force
                        if(self.CCAFSumbitted()){//is eligible for benefits, is active duty, in air force, ccaf in
                            self.militaryDocsIn(true);
                        }
                        else{//is eligible for benefits, is active duty,is in air force, ccaf not in
                            self.militaryDocsIn(false);
                        }
                    }
                    else{//is eligible for benefits, is active duty, not in air force
                        self.militaryDocsIn(true);
                    }
                }
            }
            else{//not eligible for military benefits
                self.militaryDocsIn(true);
            }
            //international docs
            if(self.internationalFileUpload()){//is international student
                if(self.passportSubmitted()){//is international student, passport is in
                    if(self.I20Submitted()){//is international student, passport is in, I20 is in
                        if(self.USVisaSubmitted()){//is international student, passport is in, I20 is in, visa is in
                            if(self.bankStatementSubmitted()){//is international student, passport is in, I20 is in, visa is in, bank statement is in
                                if(self.I539Submitted()){//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 is in
                                    if(self.selectedCampus() == 'Online'){//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 is in, online campus selected
                                        if(self.TOEFLSubmitted()){//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 is in, online campus selected, toefl is in
                                            self.internationalDocsIn(true);
                                        }
                                        else{//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 is in, online campus selected, toefl not in
                                            self.internationalDocsIn(false);
                                        }
                                    }
                                    else{//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 is in, online campus not selected
                                        self.internationalDocsIn(true);
                                    }
                                }
                                else{//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 not in
                                    self.internationalDocsIn(false);
                                }
                            }
                            else{//is international student, passport is in, I20 is in, visa is in, bank statement not in
                                self.internationalDocsIn(false);
                            }
                        }
                        else{//is international student, passport is in, I20 is in, visa not in
                            self.internationalDocsIn(false);
                        }
                    }
                    else{//is international student, passport is in, I20 not in
                        self.internationalDocsIn(false);
                    }
                }
                else{//is international student, passport not in
                    self.internationalDocsIn(false);
                }
            }
            else{//is not international student
                self.internationalDocsIn(true);
            }
            //wrapped up
            if(self.HSDiplomaSubmitted() && self.HSDiplomaSubmitted1() && self.completerDocsIn() && self.onlineDocsIn() && self.militaryDocsIn() && self.internationalDocsIn() ){
                self.allDocsIn(true);
            }
            else{
                self.allDocsIn(false);
            }
            
            self.firstPageValidation=ko.validatedObservable({
                'studentFirstName':self.studentFirstName,
                'studentLastName':self.studentLastName,
                'txt_phone_number':self.studentPhone,
                'studentEmail':self.studentEmail,
                'studentDOB':self.studentDOB,
                'studentCountry':self.studentCountry,
                'studentHomeAddress':self.studentHomeAddress,
                'studentCity':self.studentCity,
                'studentState':self.selectedUsState,
                'studentProvince':self.selectedProvince,
                'studentZip':self.studentZip,
                'residentialStatusOptions':self.residentialStatus, 
                'ssn':self.ssNumber, 
                'countryCitizen':self.countryOfCitizenship,
                'emContFirstName':self.emContFirstName,
                'emContLastName':self.emContLastName, 
                'emContRelation':self.emContRelation, 
                'txt_em_phone':self.emContPhone,
                'dp1521667701447':self.prefStartPeriod, 
                'selectedCampus':self.selectedCampus,
                'programCode':self.programCode,
                'programVersion':self.programVersion,
                'prefStartPeriod':self.prefStartPeriod,
                'txt_alt_phone_number':self.studentAltPhone
            });
            
            self.secondPageValidation= ko.validatedObservable({
                'highSchoolName':self.highSchoolName,
                'graduationDate':self.graduationDate, 
                'highSchoolCountry':self.highSchoolCountry, 
                'highSchoolCity':self.highSchoolCity,
                'selectedHighSchoolUsState':self.selectedHighSchoolUsState,
                'selectedHighSchoolProvince':self.selectedHighSchoolProvince,
                'disabilityServicesQuestion':self.disabilityServicesQuestion,
                'disabilityServicesExplain':self.disabilityServicesExplain,
                'educationDisiplineQuestion':self.educationDisiplineQuestion,
                'educationDisciplineExplain':self.educationDisciplineExplain,
                'criminalHistoryQuestion':self.criminalHistoryQuestion, 
                'criminalHistoryExplain':self.criminalHistoryExplain
            });
            
            self.thirdPageValidation=ko.validatedObservable({
                'cke_shortEssay':self.shortEssay,
                'ApplicationFinalSubmit':self.applicationSubmitted,
                'txt_ref_email':self.friendEmail,
                'txt_ref_phone':self.friendPhone
            });
                                                     
        }//end of viewmodel


        function setPw(applicantPassword, section){
            ApplicationVM.setApplicantPassword(applicantPassword,section);
        }


        function goToNextSectionApplication(){
            var currentSection = j$(".vwspc-section:visible").attr('id');            
            if(currentSection === 'studentDetailSection'){
                ApplicationVM.moveToSection('next');
            }else if(currentSection === 'educationDetailSection'){
                ApplicationVM.moveToSection('next');
            }else if(currentSection === 'essayDetailSection'){              
                ApplicationVM.goToThisSection('uploadDetailsSection');
            }
        }
        function onSignInClicked(){
            j$('#setPasswordModal').modal('hide'); 
            j$('#applicationAlreadyExistsModal').modal('hide'); 
            j$('#signInModal').modal('show'); 
        }

        function onForgotPassword(){
            j$('#signInModal').modal('hide');
            j$('#forgotPasswordModal').modal('show');
        }

        function goToNextSection(){
            goToNextSectionApplication();
        }

  
  

    
    //find details if student already filled out information  
    
    j$ = jQuery.noConflict(); 
 
    $(document).ready(function() 
    {   
        $ = jQuery.noConflict();
        
        console.log(window.location.href);
        var Application = new ApplicationVM();
        
        ko.applyBindings(Application);
        
        var short_essay=CKEDITOR.replace('shortEssay');
        short_essay.on( 'change', function( evt ) {
            Application.shortEssay(evt.editor.getData());
        });
        
        j$(".calendar").datepicker({
            dateFormat:"MM dd, yy",
            onSelect: function(dateText) {
                Application.prefStartPeriodOptions.push(dateText);
                Application.prefStartPeriod(dateText);
                //j$(".calendar").val(dateText);
            }
        });
        
        
        j$('#paybtn').click(function()
        {
            var form=$('#frm_pay_now');
            $(form).attr('method','post');
            $(form).attr('action','https://www.officialpayments.com/pc_entry_cobrand.jsp');
            var json = {'productId':'196583491153443887843804494705627227',
                    'firstName':Application.studentFirstName(),
                    'lastName':Application.studentLastName(),
                    'address1':Application.studentHomeAddress(),
                    'cityName':Application.studentCity(),
                    'provinceCd':Application.selectedUsState(),
                    'postalCd':Application.studentZip(),
                    'countryCd':Application.studentCountry(),
                    'phoneNum':Application.studentPhone(),
                    'email':Application.studentEmail(),
                    'cde-StudFirs-2':Application.studentFirstName(),
                    'cde-StudLast-0':Application.studentLastName(),
                    'cde-UniqID-1':Application.ApplicationNumber(),
                    'cde-StudID-3':Application.ApplicationNumber(),
                    'paymentAmount':Application.paymentAmount(),
                    'ccType':'VI'};
            
            for(var key in json){
                $(form).append($("<input>",{type:'hidden', name:key, value:json[key]}));
            }
            $(form).submit();
            $('#frm_pay_now input').each(function(){$(this).remove();});
            return false;
       });

        
        //Validation group for input field of start Section
        var studentInfoValidation = ko.validation.group([Application.studentFirstName,Application.studentLastName,Application.studentPhone,
            Application.studentEmail,Application.studentDOB,Application.studentCountry,Application.studentHomeAddress,Application.studentCity,
            Application.selectedProvince, Application.selectedUsState,Application.studentZip]);
        var emContInfoValidation = ko.validation.group([Application.emContFirstName,Application.emContLastName, Application.emContRelation, Application.emContPhone]);  
        //var programInfoValidation = ko.validation.group([Application.prefStartDate, Application.selectedCampus, Application.selectedProgram]);
        var programInfoValidation = ko.validation.group([Application.prefStartPeriod, Application.selectedCampus,Application.programCode,Application.programVersion]); //Application.selectedProgram
        var educationDetailsValidation = ko.validation.group([Application.highSchoolName, Application.graduationDate, Application.highSchoolCountry, Application.highSchoolCity,Application.selectedHighSchoolUsState,Application.selectedHighSchoolProvince]);
        var citizenDetailsInfoValidation = ko.validation.group([Application.residentialStatus, Application.ssNumber, Application.countryOfCitizenship]);
        var previousCriminalExplainInfoValidation = ko.validation.group([Application.criminalHistoryQuestion, Application.criminalHistoryExplain]);
        var previousEducationExplainInfoValidation = ko.validation.group([Application.educationDisiplineQuestion, Application.educationDisciplineExplain]);
        var disabilitiesDetailsInfoValidation = ko.validation.group([Application.disabilityServicesQuestion,Application.disabilityServicesExplain]);
        var referInfoValidation = ko.validation.group([Application.friendEmail]);
        var shortEssayValidation = ko.validation.group([Application.shortEssay]);

        //see if app already exists   
        j$('#loadingIconText').hide();
        j$('#loadingModal').modal('show');                                                
        new j$.Zebra_Tooltips(j$('.tooltips'));   
        //var short_essay=CKEDITOR.replace('shortEssay');          
        j$('.phone').mask('(999)-999-9999'); 
       /*
        var goToSection = '{!$CurrentPage.Parameters.goToSection}';        
        if(goToSection == 'uploadDetailsSection'){
            j$('#sectionListPanel').hide();
        }else{
            j$('#sectionListPanel').show();
        }*/
              
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ApplicationController.getStudentInfo}',    
        function(result){
            if(result != null)
            {
                var student = result['StudentInfo'];
                j$('#secondPageNextButton').text('Next');                                                          
                Application.studentId(student.Id);                      
                Application.studentLastName(student.LastName); 
                Application.studentFirstName(student.FirstName);
 
                Application.studentPhone(Application.intlNumber(student.Phone));

                Application.studentAltPhone(student.OtherPhone);
                Application.studentEmail(student.Email);        
                Application.studentHomeAddress(student.MailingStreet);                      
                Application.studentCity(student.MailingCity);                       
                Application.studentZip(student.MailingPostalCode);
                Application.studentCountry(student.MailingCountry);
                Application.emContFirstName(student.Emergency_First_Name__c);
                Application.emContLastName(student.Emergency_Last_Name__c);
                Application.emContRelation(student.Emergency_Relationship__c);
                Application.emContPhone(Application.intlNumber(student.Emergency_Contact_Phone__c));
                if(student.Age__c < 24){
                    Application.under24(true);
                }
                else
                {
                    Application.under24(false);
                }   
                if(student.MailingCountry != null)
                {
                    if(student.MailingCountry == 'United States'){
                        Application.selectedUsState(student.MailingState);
                        Application.studentState(student.MailingState);
                    }
                    else{
                        Application.studentProvince(true);
                        Application.selectedProvince(student.MailingState);
                        Application.studentState(student.MailingState);
                    }
                }                       
                if(student.Birthdate != null){
                    //Adding 8 hours to make the time conversion correct
                    var dob = normalizeDate(student.Birthdate+60*60*8*1000);

                    var dobAlt = normalizeDate2(student.Birthdate+60*60*8*1000);
                    Application.studentDOB(dob);
                    document.getElementById('studentDOB_alternate').value = dobAlt;
                }
                Application.ssNumber(student.SSN__c);

                if(student.Citizenship_Status__c == 'US Citizen'){
                    Application.residentialStatus('I am a citizen of the United States');
                    j$('#militaryInformation').show();
                }
                else if(student.Citizenship_Status__c == 'Eligible Non-citizen'){
                    Application.residentialStatus('I am a legal resident of the United States');
                    j$('#militaryInformation').show();
                }
                else if(student.Citizenship_Status__c == 'Non-citizen')
                {
                    Application.residentialStatus('I am an international student');
                    j$('#militaryInformation').hide();
                }
                else{
                    Application.residentialStatus();
                }

                Application.householdId(student.AccountId);

                if(typeof student.Country_of_Citizenship__c!=='undefined'){
                    Application.countryOfCitizenship(student.Country_of_Citizenship__c.split(','));
                }   
                Application.alienNumber(student.Alien_Registration_Number__c);
 
                Application.visaType(student.Visa_Type__c);
                Application.visaSchoolName(student.Visa_School_Name__c);
                Application.visaSchoolAddress(student.Visa_School_Address__c);          
                Application.visaSchoolCity(student.Visa_School_City__c);
                Application.visaSchoolState(student.Visa_School_State__c);
                Application.visaSchoolCountry(student.Visa_School_Country__c);
                if(student.Visa_Expiration_Date__c != null)
                {
                    var exd = normalizeDate(student.Visa_Expiration_Date__c);
                    var exdAlt = normalizeDate2(student.Visa_Expiration_Date__c);
                    Application.visaExpirationDate(exd);
                    document.getElementById('visaExpirationDate_alternate').value = exdAlt;
                }
                Application.visaSchoolZip(student.Visa_School_Zip__c);

                if(student.Eligible_for_Military_Benefits__c == true && student.Citizenship_Status__c != 'Non-citizen'){
                    Application.qualifyForBenefitsQuestion('Yes');
                }
                else {
                    Application.qualifyForBenefitsQuestion('No');
                }    
                Application.militaryAffiliation(student.Affiliation_Code__c);
                
                Application.branchOfService(student.Military_Branch__c);
                if(student.Authorize__c == true){
                    Application.authorizeTranscript('Yes');
                }
                else if(student.Authorize__c == false){
                    Application.authorizeTranscript('No');
                }
                
                if(student.ETS_EAS__c != null){
                    var etsStart = normalizeDate(student.ETS_EAS__c);
                    var etsStartAlt = normalizeDate2(student.ETS_EAS__c);
                    Application.militaryETS(etsStart);
                    document.getElementById('militaryETS_alternate').value = etsStartAlt;
                }
                if(student.Start_Date_of_Service__c != null){
                    var dosStart = normalizeDate(student.Start_Date_of_Service__c);
                    var dosStartAlt = normalizeDate2(student.Start_Date_of_Service__c);
                    Application.militaryStartDate(dosStart);
                    document.getElementById('militaryStartDate_alternate').value = dosStartAlt;
                }
                if(student.End_Date_of_Service__c != null){
                    var dosEnd = normalizeDate(student.End_Date_of_Service__c);
                    var dosEndAlt = normalizeDate2(student.End_Date_of_Service__c);
                    Application.militaryEndDate(dosEnd);
                    document.getElementById('militaryEndDate_alternate').value = dosEndAlt; 
                }
                if(student.Certificate_or_NOBE__c == true){
                    Application.currentCertificate('Yes');
                }
                else if(student.Certificate_or_NOBE__c == false) {
                    Application.currentCertificate('No');
                }
                
                Application.genderQuestion(student.Gender__c);

                Application.ethnicityQuestion(student.Ethnicity__c);
                Application.nationalityQuestion(student.Nationality__c);   
                var paramMap = {};
                paramMap['studentId']=student.Id;
                var applicationSelectedTemp = '{!applicationSelected}';
                var newApplication = '{!$CurrentPage.Parameters.newApplication}';

                if(applicationSelectedTemp == null || applicationSelectedTemp == '')
                {
                    if(Application.studentId() != null && Application.studentId != undefined && Application.studentId != '' & newApplication != 'true')
                    {
                        var temp = document.cookie.split(';');
                        for(var i =0; i<temp.length;i++){
                          if(temp[i].indexOf('latestViewedApplication') > -1){
                            var temp2 = temp[i].split('=');

                            paramMap['applicationId'] = temp2[1];
                          }                                      
                        }
                    }
                }else{
                    paramMap['applicationId'] = '{!applicationSelected}'; //this will be null in new application context     
                }
                
                // see if already have an application and if so fill in details
                var signature;
                
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ApplicationController.getApplicationInfo}', paramMap,  
                function(result)
                { 
                    var application = result.Application;
                    signature = result.Signature;
                                                                                                                                                                                    
                    if(!application)
                    {
                        //Application.studentDetails(true);
                    
                        Application.isReadOnly(false); 

                        Application.moveToSection('first');                                      
                        return;
                    }
                    else
                    {
                        Application.isPaid(application.Application_Fee_Paid__c);
                        Application.confirmationNumber(application.Payment_Confirmation__c);
                    
                        if(application.Application_Submitted__c){
                            Application.applicationSubmitted(true);
                        }
                        
                        if(application.Pay_Later__c){
                            Application.payLater(true);
                        }
                        
                        if(application.Application_Finalized__c){
                            Application.populateSignature();
                        }
                        if(application.Application_Submitted__c){                                               
                            var studentFullName = Application.studentFirstName() + ' '+Application.studentLastName(); 
                            j$('#ApplicantSignature').val(studentFullName);     
                        }
                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ApplicationController.getDocusign}', application.Id,
                        function(docs, event){
                            Application.docuSignList(docs);
                        }, {escape: true});
                        //Application.getDocusign(application.Id);
                        
                        Application.applicationFound(true);                                       
                        var appStatus = application.Application_Status__c;

                        appStatus = appStatus.toLowerCase();
                        if(appStatus === 'submitted' || appStatus ==='approved')
                        {
                            Application.isReadOnly(true);
                            Application.appFinalized(true);
                                            
                            if(signature){
                                var signUrl = 'https://'+window.location.hostname+'/servlet/servlet.FileDownload?file='+signature.Id;
                                j$("#signature").html('<img src="'+signUrl+'" alt="Applicant Signature">');          
                                j$('#clear_signature').attr('disabled','true');                                             
                            } 
                            j$('input[type="text"]').each(function(){
                                var dataBind = j$(this).attr('data-bind');
                                dataBind += ',enable:!isReadOnly';
                                j$(this).attr('data-bind',dataBind);
                               
                                ko.cleanNode(j$(this)[0]);
                                ko.applyBindings(Application,j$(this)[0]);
                            });
                            j$('input[type="checkbox"]').each(function(){
                                if(j$(this).attr('id') != "PayLater"){
                                    var dataBind = j$(this).attr('data-bind');
                                    dataBind += ',enable:!isReadOnly';
                                    j$(this).attr('data-bind',dataBind);
                                    ko.cleanNode(j$(this)[0]);
                                    ko.applyBindings(Application,j$(this)[0]);  
                                }
                            });

                            j$('input[type="email"]').each(function(){
                                var dataBind = j$(this).attr('data-bind');
                                dataBind += ',enable:!isReadOnly';
                                j$(this).attr('data-bind',dataBind);
                                
                                ko.cleanNode(j$(this)[0]);
                                ko.applyBindings(Application,j$(this)[0]);
                            });
                            
                            j$('select').each(function(){
                                var dataBind = j$(this).attr('data-bind');
                                dataBind += ',enable:!isReadOnly';
                                j$(this).attr('data-bind',dataBind);
                                
                                ko.cleanNode(j$(this)[0]);
                                ko.applyBindings(Application,j$(this)[0]);
                            });
                            
                            j$('textarea').each(function(){
                                var dataBind = j$(this).attr('data-bind');
                                dataBind += ',enable:!isReadOnly';
                                j$(this).attr('data-bind',dataBind);
                                
                                ko.cleanNode(j$(this)[0]);
                                ko.applyBindings(Application,j$(this)[0]);
                            });

                            
                        }else{
                            Application.isReadOnly(false);
                        }

                        Application.applicationId(application.Id);
                        Application.appFinalized(application.Application_Finalized__c);
                        Application.ApplicationNumber(application.Application_Number__c);
                        
                        if(application.Student_Info_Complete__c == true){
                            Application.studentDetailsComplete(true);
                        }
                        if(application.Parent_Info_Complete__c == true){
                            Application.parentInfoComplete(true);
                        } 
                        
                        if(application.Veteran_Info_Complete__c == true){
                            Application.veteranInfoComplete(true);
                        } 
                        if(application.College_Info_Complete__c == true){
                            Application.collegeInfoComplete(true);
                        }
                        if(application.Citizen_Info_Complete__c == true){
                            Application.citizenInfoComplete(true); 
                        }                                       
                        if(application.Essay_Complete__c == true){                                             
                            Application.shortEssayComplete(true);                                            
                        }
                        if(application.Emergency_Contact_Info_Complete__c == true){
                            Application.emContInfoComplete(true);
                        }
                        if(application.Program_Info_Complete__c == true){ 
                            Application.programInfoComplete(true);
                        }
                        if(application.High_School_Info_Complete__c == true){
                            Application.highSchoolInfoComplete(true); 
                        }
                        if(application.Criminal_History_Complete__c == true){
                            Application.criminalInfoComplete(true);
                            if(application.Criminal_History__c == true){
                                Application.criminalHistoryQuestion('Yes');
                            }
                            else{
                                Application.criminalHistoryQuestion('No');
                            }                                       
                            Application.criminalHistoryExplain(application.Criminal_History_Explanation__c);
                        }
                        if(application.Discipline_Section_Complete__c == true){
                            Application.disciplineInfoComplete(true);
                            if(application.Academic_Misconduct__c == true){
                                Application.educationDisiplineQuestion('Yes');
                            }
                            else{
                                Application.educationDisiplineQuestion('No');
                            }
                            Application.educationDisciplineExplain(application.Academic_Misconduct_Explanation__c);
                        }
                        if(application.Disability_Info_Complete__c == true){
                            Application.disabilityInfoComplete(true);
                            if(application.Disability_Accomodations__c == true){
                                Application.disabilityServicesQuestion('Yes, I will be requesting the use of auxiliary aids and/or services as described above.');
                            }
                            else{
                                Application.disabilityServicesQuestion('No, I will NOT by requesting the use of auxiliary aids and/or services as described above.');
                            }
                            Application.disabilityServicesExplain(application.Disability_Explanation__c);
                        }
                        if(application.Statistical_Info_Complete__c == true){
                            Application.statisticalInfoComplete(true);
                        } 
                        if(application.Referral_Info_Complete__c == true){
                            Application.referralInfoComplete(true);
                        }
                        if(application.Acceptance_Info_Complete__c == true){
                            Application.acceptanceInfoComplete(true);
                        }                                                                   
                        Application.acceptedAgreement(application.Accepted_Agreement__c);
                        
                        Application.representative(application.Addmission_Representative__c);
                                    
                        Application.college1DegreeReceived(application.College_1_Degree__c);
                                                        
                        if(application.College_1_Graduation_Date__c != null){
                            var col1Grad = normalizeDate(application.College_1_Graduation_Date__c);
                            var col1GradAlt = normalizeDate2(application.College_1_Graduation_Date__c);
                            Application.college1GraduationDate(col1Grad);
                            document.getElementById('college1GraduationDate_alternate').value = dosStartAlt;
                            
                        }
                        Application.college1Name(application.College_1_Name__c);
                        Application.college2DegreeReceived(application.College_2_Degree__c);
                        if(application.College_2_Graduation_Date__c != null){
                            var col1Grad = normalizeDate(application.College_2_Graduation_Date__c);
                            var col1GradAlt = normalizeDate2(application.College_2_Graduation_Date__c);
                            Application.college2GraduationDate(col1Grad);
                            document.getElementById('college2GraduationDate_alternate').value = dosStartAlt;
                        }
                        
                        Application.college2Name(application.College_2_Name__c);
                        Application.collegeNotes(application.College_Notes__c);

                        
                        Application.degreeReceived(application.HS_Degree_Received__c);
                        if(application.Friend_Referral__c == true){
                            Application.referFriendQuestion('Yes');
                        }
                        else{
                            Application.referFriendQuestion('No');
                        }
                        if(application.HS_Graduation_Date__c != null){                                          
                            var hsGrad = normalizeDate(application.HS_Graduation_Date__c);
                            var hsGradAlt = normalizeDate2(application.HS_Graduation_Date__c);
                            Application.graduationDate(hsGrad);
                            document.getElementById('graduationDate_alternate').value = hsGradAlt;
                        }
                        Application.highSchoolAddress(application.High_School_Address__c);
                        Application.highSchoolAddress2(application.High_School_Address_2__c);
                        Application.highSchoolCity(application.High_School_City__c);
                        Application.highSchoolName(application.High_School_Name__c);
                        Application.highSchoolState(application.High_School_State__c);
                        Application.highSchoolCountry(application.High_School_Country__c);  
                        if(application.High_School_Country__c != null){
                            if(application.High_School_Country__c == 'United States'){
                                Application.selectedHighSchoolUsState(application.High_School_State__c);
                                Application.highSchoolState(application.High_School_State__c);
                            }
                            else{
                                Application.highSchoolProvince(true);
                                Application.selectedHighSchoolProvince(application.High_School_State__c);
                                Application.highSchoolState(application.High_School_State__c);
                            }
                        }   
                        Application.highSchoolZip(application.High_School_Zip__c);
                        
                        //Application.prefStartDate(application.Preferred_Start_Date__c);

                        if(application.Preferred_Start_Period__c){
                            Application.prefStartPeriod(application.Preferred_Start_Period__c);
                        }
                        else{
                            Application.prefStartPeriod('Undecided');
                        }
                        //Application.selectedProgram(application.Program__c);
                                                             
                        //put program selectionin based on code   
                        
                        var pcode=application.Program_Code__c;

                        if(typeof pcode !== 'undefined')
                        {
                            if(pcode && pcode.substring(pcode.length-2)=="-O"){
                                Application.selectedCampus('Online');
                            }
                            else
                            {
                                Application.selectedCampus('On Campus');
                            }   
                        
                        }    
                                                           
                        Application.programCode(application.Program_Code__c);  
                        Application.programVersion(application.Program_Version__c);
                        if(application.Student_Info_Complete__c == true){
                            Application.studentDetailsComplete(true);
                        }

                                            
                       Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ApplicationController.getReferralInfo}', Application.studentId(),  
                       function(referral)
                       {                                                                                                                                              
                            Application.friendFirstName(referral.Referral_First_Name__c);
                            Application.friendLastName(referral.Referral_Last_Name__c);
                            Application.friendEmail(referral.Referral_Email__c);
                            Application.friendPhone(Application.intlNumber(referral.Referral_Phone__c));
                            Application.friendOther(referral.Referral_Notes__c);  
                            
                            if(referral.Referral_Email__c!=null){
                                Application.referFriendQuestion('Yes');
                            }      
                       },{escape : false});


                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.ApplicationController.getEmerContInfo}', Application.studentId(),  
                            function(emCont){                                                                                                                                                
                                Application.emContFirstName(emCont.Emergency_First_Name__c);
                                Application.emContLastName(emCont.Emergency_Last_Name__c);
                                Application.emContRelation(emCont.Emergency_Relationship__c);
                                Application.emContPhone(Application.intlNumber(emCont.Emergency_Contact_Phone__c));      
                        },{escape : false});
                        
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.ApplicationController.getParentInfo}', Application.studentId(),  
                            function(parent){                                                                                                                                               
                                Application.studentParentFirstName(parent.Parent_First_Name__c);
                                Application.studentParentLastName(parent.Parent_Last_Name__c);
                                Application.studentParentEmail(parent.Parent_Email__c);
                                Application.studentParentPhone(parent.Parent_Phone__c);       
                        },{escape : false});
                        
                        Application.shortEssay(application.Short_Essay__c);
                        
                        CKEDITOR.instances['shortEssay'].setData(application.Short_Essay__c);
                        //Application.transcriptRequest(application.Transcript_Request__c);                                                       
                        Application.I539Status(application.I539_Received__c);
                        Application.I539SubStatus(application.I539_Received__c);
                        Application.collegeTranscriptsStatus(application.College_Transcript_Received__c);
                        Application.masterPromissoryNoteStatus(application.Master_Promissory_Note__c);
                        Application.wardOfCourtDocStatus(application.Ward_of_Court_Document__c);
                        Application.legalGuardianshipDocStatus(application.Legal_Guardianship_Document__c);
                        Application.dependencyOverrideStmtStatus(application.Dependency_Override_Statement__c);
                        Application.defaultResolutionLetterStatus(application.Default_Resolution_Letter__c);
                        Application.ISIRCCode146Status(application.ISIR_CCode_146_Citizenship__c);
                        Application.ISIRCCode030Status(application.ISIR_CCode_030_Selective_Service__c);
                        Application.w2FormStatus(application.W2_Form__c);
                        Application.studentTaxTranscriptsStatus(application.Student_Tax_Transcripts_2016__c);
                        Application.studentTaxReturnStatus(application.Master_Promissory_Note__c);
                        Application.spouseTaxTransStatus(application.Spouse_Tax_Transcript2016__c);
                        Application.spouseTaxReturnStatus(application.Spouse_Tax_Return_2017__c);
                        Application.parentTaxTranscriptsStatus(application.Parent_Tax_Transcripts2016__c);
                        Application.parentTaxReturnStatus(application.Parent_Tax_Return2017__c);
                        Application.PLUSMasterPromissoryStatus(application.PLUS_Master_Promissory_Note__c);
                        Application.EntranceCounselingSubStatus(application.Entrance_Counseling__c);
                        Application.collegeTransStatus(application.College_Transcript_Received__c);
                        Application.compSpecsStatus(application.Computer_Specs_Received__c);
                        Application.computerSpecsStatus(application.Computer_Specs_Received__c);
                        Application.photoIdStatus(application.Photo_Id_Received__c);
                        Application.parentsPhotoIDStatus(application.Photo_Id_Received__c);
                        Application.HSDiplomaStatus(application.HS_Diploma_Received__c);
                        Application.hsDiplomaStats(application.HS_Diploma_Received__c);
                        Application.CCAFStatus(application.CCAF_Recieved__c);
                        Application.CCAFSumbStatus(application.CCAF_Recieved__c);
                        Application.DD214Status(application.DD214_Received__c);
                        Application.DD214SubStatus(application.DD214_Received__c);
                        Application.passportStatus(application.Passport_Received__c);
                        Application.passportSubStatus(application.Passport_Received__c);
                        Application.I20Status(application.I20_Received__c);
                        Application.I20SubmittedStatus(application.I20_Received__c);
                        Application.USVisaStatus(application.US_Visa_Received__c);
                        Application.USVisaSubStatus(application.US_Visa_Received__c);
                        Application.I94Status(application.I94_Received__c);
                        Application.I94SubStatus(application.I94_Received__c);
                        Application.TOEFLStatus(application.TOEFL_Received__c);
                        Application.TOEFLSubStatus(application.TOEFL_Received__c);
                        Application.bankStatementStatus(application.Bank_Statement_Received__c);
                        Application.bankStatementSubStatus(application.Bank_Statement_Received__c);
                        
                        if(application.I539_Received__c == 'Received' || application.I539_Received__c == null || application.I539_Received__c == 'Accepted' ){
                            Application.I539Submitted(true);
                        }
                        else{
                            Application.I539Submitted(false);                                       
                        }
                        /////edit///////
                         if(application.I94_Received__c == 'Received' || application.I94_Received__c == null || application.I94_Received__c == 'Accepted' ){
                            Application.I94Submitted(true);
                        }
                        else{
                            Application.I94Submitted(false);                                       
                        }
                        ////edit  end////////////
                        if(application.College_Transcript_Received__c == 'Received' || application.College_Transcript_Received__c == null ||  application.College_Transcript_Received__c  == 'Accepted' ){
                            Application.collegeTranscriptsSubmitted(true);
                        }
                        else{
                            Application.collegeTranscriptsSubmitted(false);                                     
                        }
                        if(application.Master_Promissory_Note__c == 'Received' || application.Master_Promissory_Note__c == null ||  application.Master_Promissory_Note__c == 'Accepted' ){
                            Application.masterPromissoryNoteSubmitted(true);
                            Application.masterPromissoryNoteStatus(application.Master_Promissory_Note__c);
                        }
                        else{
                            Application.masterPromissoryNoteSubmitted(false);                                     
                        }
                        if(application.Ward_of_Court_Document__c == 'Received' || application.Ward_of_Court_Document__c == null ||   application.Ward_of_Court_Document__c == 'Accepted' ){
                            Application.wardOfCourtDocSubmitted(true);
                        }
                        else{
                            Application.wardOfCourtDocSubmitted(false);                                     
                        }
                        if(application.Legal_Guardianship_Document__c == 'Received' || application.Legal_Guardianship_Document__c == null ||   application.Legal_Guardianship_Document__c == 'Accepted'){
                            Application.legalGuardianshipDocSubmitted(true);
                        }
                        else{
                            Application.legalGuardianshipDocSubmitted(false);                                     
                        }
                        if(application.Dependency_Override_Statement__c == 'Received' || application.Dependency_Override_Statement__c == null ||  application.Dependency_Override_Statement__c == 'Accepted'){
                            Application.dependencyOverrideStmtSubmitted(true);
                        }
                        else{
                            Application.dependencyOverrideStmtSubmitted(false);                                     
                        }
                        if(application.Default_Resolution_Letter__c == 'Received' || application.Default_Resolution_Letter__c == null ||  application.Default_Resolution_Letter__c == 'Accepted' ){
                            Application.defaultResolutionLetterSubmitted(true);
                        }
                        else{
                            Application.defaultResolutionLetterSubmitted(false);                                     
                        }
                        if(application.ISIR_CCode_146_Citizenship__c == 'Received' || application.ISIR_CCode_146_Citizenship__c == null ||   application.ISIR_CCode_146_Citizenship__c == 'Accepted' ){
                            Application.ISIRCCode146Submitted(true);
                        }
                        else{
                            Application.ISIRCCode146Submitted(false);                                     
                        }
                        if(application.ISIR_CCode_030_Selective_Service__c == 'Received' || application.ISIR_CCode_030_Selective_Service__c == null ||   application.ISIR_CCode_030_Selective_Service__c  == 'Accepted' ){
                            Application.ISIRCCode030ubmitted(true);
                        }
                        else{
                            Application.ISIRCCode030ubmitted(false);                                     
                        }
                        if(application.W2_Form__c  == 'Received' || application.W2_Form__c  == null ||  application.W2_Form__c  == 'Accepted' ){
                            Application.w2FormSubmitted(true);
                        }
                        else{
                            Application.w2FormSubmitted(false);                                     
                        }
                        if(application.Student_Tax_Transcripts_2016__c == 'Received' || application.Student_Tax_Transcripts_2016__c == null ||  application.Student_Tax_Transcripts_2016__c == 'Accepted' ){
                            Application.studentTaxTranscriptsSubmitted(true);
                        }
                        else{
                            Application.studentTaxTranscriptsSubmitted(false);                                     
                        }
                        if(application.Student_Tax_Return_2017__c == 'Received' ||  application.Student_Tax_Return_2017__c == null || application.Student_Tax_Return_2017__c == 'Accepted' ){
                            Application.studentTaxReturnSubmitted(true);
                        }
                        else{
                            Application.studentTaxReturnSubmitted(false);                                     
                        }
                        if(application.Spouse_Tax_Transcript2016__c == 'Received' || application.Spouse_Tax_Transcript2016__c == null ||  application.Spouse_Tax_Transcript2016__c == 'Accepted' ){
                            Application.spouseTaxTranscriptSubmitted(true);
                        }
                        else{
                            Application.spouseTaxTranscriptSubmitted(false);                                     
                        }
                        if(application.Spouse_Tax_Return_2017__c == 'Received' || application.Spouse_Tax_Return_2017__c == null ||  application.Spouse_Tax_Return_2017__c == 'Accepted' ){
                            Application.spouseTaxReturnSubmitted(true);
                        }
                        else{
                            Application.spouseTaxReturnSubmitted(false);                                     
                        }
                        if(application.Parent_Tax_Transcripts2016__c == 'Received' || application.Parent_Tax_Transcripts2016__c == null ||  application.Parent_Tax_Transcripts2016__c == 'Accepted' ){
                            Application.parentTaxTranscriptsSubmitted(true);
                        }
                        else{
                            Application.parentTaxTranscriptsSubmitted(false);                                     
                        }
                        if(application.Parent_Tax_Return2017__c == 'Received' || application.Parent_Tax_Return2017__c == null ||  application.Parent_Tax_Return2017__c  == 'Accepted' ){
                            Application.parentTaxReturn2017Submitted(true);
                        }
                        else{
                            Application.parentTaxReturn2017Submitted(false);                                     
                        }
                        if(application.Entrance_Counseling__c == 'Received' || application.Entrance_Counseling__c == null ||  application.Entrance_Counseling__c == 'Accepted' ){
                            Application.EntranceCounselingSubmitted(true);
                        }
                        else{
                            Application.EntranceCounselingSubmitted(false);                                     
                        }  
                        if(application.PLUS_Master_Promissory_Note__c == 'Received' || application.PLUS_Master_Promissory_Note__c == null ||  application.PLUS_Master_Promissory_Note__c == 'Accepted' ){
                            Application.PLUSMasterPromissorySubmitted(true);
                        }
                        else{
                            Application.PLUSMasterPromissorySubmitted(false);                                     
                        } 
                        if(application.Photo_Id_Received__c == 'Received' || application.Photo_Id_Received__c == null || application.Photo_Id_Received__c == 'Accepted' ){
                            Application.photoIdSubmitted(true);
                        }
                        else{
                            Application.photoIdSubmitted(false);                                        
                        }       
                        if(application.Computer_Specs_Received__c == 'Received' || application.Computer_Specs_Received__c == null || application.Computer_Specs_Received__c == 'Accepted' ){
                            Application.compSpecsSubmitted(true);
                        }
                        else{
                            Application.compSpecsSubmitted(false);                                      
                        }
                        if(application.HS_Diploma_Received__c == null){
                            Application.HSDiplomaSubmitted1(true);
                            Application.HSDiplomaStatus(application.HS_Diploma_Received__c);
                        }
                        else{
                            Application.HSDiplomaSubmitted1(false);                                      
                        } 
                        if(application.HS_Diploma_Received__c == 'Received'   ||  application.HS_Diploma_Received__c == null ||  application.HS_Diploma_Received__c == 'Accepted' ){
                            Application.HSDiplomaSubmitted(true);
                            Application.hsDiplomaStats(application.HS_Diploma_Received__c);
                        }
                        else{
                            Application.hsDiplomaStats(false);                                      
                        }   
                        if(application.CCAF_Recieved__c == 'Received' || application.CCAF_Recieved__c == null || application.CCAF_Recieved__c == 'Accepted' ){
                            Application.CCAFSumbitted(true);
                            Application.CCAFStatus(application.CCAF_Recieved__c);
                            Application.CCAFSumbStatus(application.CCAF_Recieved__c);
                        }
                        else{
                            Application.CCAFSumbitted(false);
                            Application.CCAFSumbStatus(false);                                       
                        }   
                        if(application.DD214_Received__c == 'Received' || application.DD214_Received__c == null || application.DD214_Received__c == 'Accepted' ){
                            Application.DD214Submitted(true);
                            Application.DD214Status(application.DD214_Received__c);
                            Application.DD214SubStatus(application.DD214_Received__c);
                        }
                        else{
                            Application.DD214Submitted(false);  
                            Application.DD214SubStatus(false);                                    
                        }   
                        if(application.Passport_Received__c == 'Received' || application.Passport_Received__c == null || application.Passport_Received__c == 'Accepted' ){
                            Application.passportSubmitted(true);
                            Application.passportStatus(application.Passport_Received__c);
                            Application.passportSubStatus(application.Passport_Received__c);
                        }
                        else{
                            Application.passportSubmitted(false); 
                            Application.passportSubStatus(false);                                      
                        }
                        if(application.I20_Received__c == 'Received' || application.I20_Received__c == null || application.I20_Received__c == 'Accepted' ){
                            Application.I20Submitted(true);
                            Application.I20Status(application.I20_Received__c);
                            Application.I20SubmittedStatus(application.I20_Received__c);
                        }
                        else{
                            Application.I20Submitted(false);  
                             Application.I20SubmittedStatus(false);                                       
                        }
                        if(application.US_Visa_Received__c == 'Received' || application.US_Visa_Received__c == null || application.US_Visa_Received__c == 'Accepted'){
                            Application.USVisaSubmitted(true);
                            Application.USVisaStatus(application.US_Visa_Received__c);
                            Application.USVisaSubStatus(application.US_Visa_Received__c);
                        }
                        else{
                            Application.USVisaSubmitted(false);  
                            Application.USVisaSubStatus(false);                                   
                        }

                        if(application.TOEFL_Received__c == 'Received' || application.TOEFL_Received__c == null || application.TOEFL_Received__c == 'Accepted'){
                            Application.TOEFLSubmitted(true);
                            Application.TOEFLStatus(application.TOEFL_Received__c);
                            Application.TOEFLSubStatus(application.TOEFL_Received__c);
                        }
                        else{
                            Application.TOEFLSubmitted(false); 
                            Application.TOEFLSubStatus(false);                                     
                        }
                        if(application.Bank_Statement_Received__c == 'Received' || application.Bank_Statement_Received__c == null || application.Bank_Statement_Received__c == 'Accepted'){
                            Application.bankStatementSubmitted(true);
                            Application.bankStatementStatus(application.Bank_Statement_Received__c);
                            Application.bankStatementSubStatus(application.Bank_Statement_Received__c);
                        }
                        else{
                            Application.bankStatementSubmitted(false);
                            Application.bankStatementSubStatus(false);                                      
                        }
                        
                        if(application.HS_Transcript_Evaluation_Recieved__c == 'Received' || application.HS_Transcript_Evaluation_Recieved__c == 'Accepted' ){
                            Application.HSTranscriptEvaluationSubmitted(true);   
                            Application.HSTransriptEvaluationStatus(application.HS_Transcript_Evaluation_Recieved__c);                                             
                        }
                        else{
                            Application.HSTranscriptEvaluationSubmitted(false);                                      
                        }
                                        
                        //in the bs of entertain completer
                        if(Application.selectedProgram() == 'Bachelor of Science in Entertainment Completer'){
                            if(Application.collegeTranscriptsSubmitted()){
                                Application.completerDocsIn(true);
                            }
                            else{
                                Application.completerDocsIn(false);
                            }
                        }
                        else{
                            Application.completerDocsIn(true);
                        }
                        //online campus
                        if(Application.selectedCampus() == 'Online')
                        {
                            if(Application.photoIdSubmitted())
                            {
                                if(Application.haveNoComputer())
                                {
                                    if(Application.compSpecsSubmitted())
                                    {
                                        Application.onlineDocsIn(true);
                                    }
                                    else{
                                        Application.onlineDocsIn(false);
                                    }
                                }
                                else{
                                    Application.onlineDocsIn(true);
                                }           
                            }
                            else{
                                Application.onlineDocsIn(false);
                            }   
                        }
                        else{
                            Application.onlineDocsIn(true);
                        }
                        //military docs
                        if(Application.militaryFileUpload()){//eligible for military benefits
                            if(Application.militaryAffiliation() != 'ACT'){//is eligible for benefits, not active duty
                                if(Application.DD214Submitted()){//is eligible for benefits,not active duty, dd214 in
                                    if(Application.branchOfService() == 'Air Force'){//is eligible for benefits,not active duty, dd214 in, in air force
                                        if(Application.CCAFSumbitted()){//is eligible for benefits,not active duty, dd214 in, in air force, ccaf in
                                            Application.militaryDocsIn(true);
                                        }
                                        else{//is eligible for benefits,not active duty, dd214 in, in air force, ccaf not in
                                            Application.militaryDocsIn(false);
                                        }
                                    }
                                    else{//is eligible for benefits,not active duty,dd214 in, not air force
                                        Application.militaryDocsIn(true);
                                    }
                                }
                                else{//is eligible for benefits,not active duty, dd214 not in
                                    Application.militaryDocsIn(false);
                                }
                            }
                            else{//is eligible for benefits,is active duty
                                if(Application.branchOfService() == 'Air Force'){//is eligible for benefits,is active duty, is in air force
                                    if(Application.CCAFSumbitted()){//is eligible for benefits, is active duty, in air force, ccaf in
                                        Application.militaryDocsIn(true);
                                    }
                                    else{//is eligible for benefits, is active duty,is in air force, ccaf not in
                                        Application.militaryDocsIn(false);
                                    }
                                }
                                else{//is eligible for benefits, is active duty, not in air force
                                    Application.militaryDocsIn(true);
                                }
                            }
                        }
                        else{//not eligible for military benefits
                            Application.militaryDocsIn(true);
                        }
                                        
                                        
                        //international docs
                        if(Application.internationalFileUpload()){//is international student
                            if(Application.passportSubmitted()){//is international student, passport is in
                                if(Application.I20Submitted()){//is international student, passport is in, I20 is in
                                    if(Application.USVisaSubmitted()){//is international student, passport is in, I20 is in, visa is in
                                        if(Application.bankStatementSubmitted()){//is international student, passport is in, I20 is in, visa is in, bank statement is in
                                            if(Application.I539Submitted()){//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 is in
                                                if(Application.selectedCampus() == 'Online'){//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 is in, online campus selected
                                                    if(Application.TOEFLSubmitted()){//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 is in, online campus selected, toefl is in
                                                        Application.internationalDocsIn(true);
                                                    }
                                                    else{//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 is in, online campus selected, toefl not in
                                                        Application.internationalDocsIn(false);
                                                    }
                                                }
                                                else{//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 is in, online campus not selected
                                                    Application.internationalDocsIn(true);
                                                }
                                            }
                                            else{//is international student, passport is in, I20 is in, visa is in, bank statement is in, I539 not in
                                                Application.internationalDocsIn(false);
                                            }
                                        }
                                        else{//is international student, passport is in, I20 is in, visa is in, bank statement not in
                                            Application.internationalDocsIn(false);
                                        }
                                    }
                                    else{//is international student, passport is in, I20 is in, visa not in
                                        Application.internationalDocsIn(false);
                                    }
                                }
                                else{//is international student, passport is in, I20 not in
                                    Application.internationalDocsIn(false);
                                }
                            }
                            else{//is international student, passport not in
                                Application.internationalDocsIn(false);
                            }
                        }
                        else{//is not international student
                            Application.internationalDocsIn(true);
                        }                                                                               
                        if(Application.HSDiplomaSubmitted() && Application.HSDiplomaSubmitted1() && Application.completerDocsIn() && Application.onlineDocsIn() && Application.militaryDocsIn() && Application.internationalDocsIn()){
                            Application.allDocsIn(true);
                        }
                        else{
                            Application.allDocsIn(false);
                        }
                        
                        // moving pages
                        var goToSection = '{!$CurrentPage.Parameters.pageSection}'; 
                        
                        if(!goToSection){
                            goToSection = '{!$CurrentPage.Parameters.goToSection}'; 
                        }  
                        if(typeof goToSection !== 'undefined' && goToSection != '')
                        {
                            /*
                            if(goToSection=='essayDetailSection' && Application.thirdPageValidation.isValid()==true)
                            {
                                goToSection='uploadDetailsSection';
                            }
                            */
                            
                            if(goToSection == 'uploadDetailsSection')
                            {
                                j$('#sectionListPanel').hide();
                            }
                            else
                            {
                                j$('#sectionListPanel').show();
                            }
                            
                            Application.moveToSection(goToSection);
                        }
                        else
                        {
                            j$('#sectionListPanel').show();
                            Application.moveToSection('first');    
                        }
                    }
                },{escape : false}); //getApplicationInfo ends
                
            }
            else
            {
                Application.moveToSection('studentDetailSection');
            }                                                             
        },{escape : false}); //getStudentsInfo ends
          
        Application.pageName('application');//shows logout link
        
        // work on browser back button
        window.onpopstate = function(event)
        {
            var url_string = window.location;
            var url = new URL(url_string);
            var section = url.searchParams.get("goToSection");
            var current=j$(".vwspc-section:visible").attr('id');
            
            if(current!=section){
                Application.moveToSection(section);
            }
        };
    });              
    </script>   
</apex:component>